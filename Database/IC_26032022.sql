alter PROC [dbo].[USP_R_ITEMVISUALIZER]          
@ItemID INT          
AS          
BEGIN          
          
 SELECT I.ITEMNAME, I.SKUCODE, I.DESCRIPTION          
 FROM ITEM I          
 WHERE I.ITEMID = @ItemID          
          
 SELECT           
  IP.ITEMPRICEID          
  , IP.ITEMCODEID          
  , IC.ITEMCODE          
  , ICP.COSTPRICEWT          
  , ICP.COSTPRICEWOT          
  , IP.SALEPRICE          
  , IP.MRP          
  , IP.GSTID          
  , GST.GSTCODE          
  , CU.FULLNAME AS CREATEDBY          
  , IP.CREATEDDATE          
  , UU.FULLNAME AS UPDATEDBY          
  , IP.UPDATEDATE          
 FROM          
  ITEMPRICE IP          
  INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID          
  INNER JOIN GSTDETAIL GST ON GST.GSTID = IP.GSTID          
  INNER JOIN ITEMCOSTPRICE ICP ON ICP.ITEMPRICEID = IP.ITEMPRICEID        
  LEFT JOIN TBLUSER CU ON CU.USERID = IP.CREATEDBY          
  LEFT JOIN TBLUSER UU ON UU.USERID = IP.UPDATEDBY          
 WHERE IC.ITEMID = @ItemID          
          
 SELECT 
  IP.ITEMPRICEID
  ,IC.ITEMCODEID
  ,IC.ITEMCODE
  ,IP.MRP
  ,IP.SALEPRICE
  ,SS.BRANCHID          
  , B.BRANCHNAME          
  , SS.QUANTITY          
  , SS.INTRANSITQUANTITY          
  , SS.WEIGHTINKGS          
  , SS.INTRANSITWEIGHTINKGS          
 FROM           
  STOCKSUMMARY SS          
  INNER JOIN BRANCH B ON B.BRANCHID = SS.BRANCHID  
  INNER JOIN ITEMPRICE IP ON SS.ITEMPRICEID = IP.ITEMPRICEID  
  INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID  
  WHERE IC.ITEMID = @ItemID  
   
          
END   
GO
CREATE FUNCTION [dbo].[UDF_GETOFFERS] (@ItemPriceID INT) 
RETURNS @Offer TABLE (ITEMPRICEID INT, OFFERID INT, OFFERAPPLIESTOID INT, DEALID INT, DEALAPPLIESTOID INT)
AS
BEGIN

	DECLARE @ItemCodeID INT, @CategoryID INT, @MaxDate DATE, @OfferID INT, @DealID INT
	SELECT @MaxDate = '2100-01-01'	 

	SELECT @ItemCodeID = IC.ITEMCODEID, @CategoryID = I.CATEGORYID
	FROM 
		ITEMPRICE IP
		INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID
		INNER JOIN ITEM I ON I.ITEMID = IC.ITEMID
	WHERE IP.ITEMPRICEID = @ItemPriceID

	DECLARE @Offers TABLE (OFFERID INT, APPLIESTOID INT, OFFERTYPEID INT)

	INSERT INTO @Offers
	SELECT OFR.OFFERID, OFR.APPLIESTOID, OFR.OFFERTYPEID
	FROM
		OFFER OFR
	WHERE 
		GETDATE() BETWEEN OFR.STARTDATE AND ISNULL(OFR.ENDDATE, @MaxDate)
		AND OFR.ISACTIVE = 1
		AND OFR.DELETEDDATE IS NULL
		AND 
			(
				EXISTS (SELECT 1 FROM OFFERITEMMAP OFRIM WHERE OFRIM.OFFERID = OFR.OFFERID AND OFRIM.ITEMCODEID = @ItemCodeID AND OFRIM.DELETEDDATE IS NULL)
				OR OFR.CATEGORYID = @CategoryID
				OR EXISTS 
					(
						SELECT 1 
						FROM 
							ITEMGROUP IG 
							INNER JOIN ITEMGROUPDETAIL IGD ON IGD.ITEMGROUPID = IG.ITEMGROUPID
						WHERE 
							IGD.ITEMCODEID = @ItemCodeID
							AND OFR.ITEMGROUPID = IG.ITEMGROUPID
							AND IG.DELETEDDATE IS NULL
							AND IGD.DELETEDDATE IS NULL
					)
			)
	ORDER BY APPLIESTOID ASC, OFFERID DESC

	
	SELECT TOP 1 @OfferID = OFFERID
	FROM @Offers
	WHERE OFFERTYPEID IN (1, 2, 3)
	ORDER BY APPLIESTOID ASC, OFFERID DESC

	SELECT @DealID = OFFERID
	FROM @Offers
	WHERE OFFERTYPEID NOT IN (1, 2, 3)
	ORDER BY APPLIESTOID ASC, OFFERID DESC

	INSERT INTO @Offer(ITEMPRICEID, OFFERID, DEALID)
	SELECT @ItemPriceID, @OfferID, @DealID
	
	UPDATE OFRTMP
	SET 
		OFRTMP.OFFERAPPLIESTOID = OFRID.APPLIESTOID
		, OFRTMP.DEALAPPLIESTOID = DLID.APPLIESTOID
	FROM 
		@Offer OFRTMP
		LEFT JOIN OFFER OFRID ON OFRID.OFFERID = OFRTMP.OFFERID 
		LEFT JOIN OFFER DLID ON DLID.OFFERID = OFRTMP.DEALID
	

	RETURN
END
GO
CREATE PROCEDURE USP_R_GETOFFERS  
@ITEMPRICEID INT  
AS  
BEGIN  
  
CREATE TABLE #IOFFER(OFFERID INT, OFFERNAME NVARCHAR(100),OFFERCODE NVARCHAR(10),  
STARTDATE DATETIME,ENDDATE DATETIME,OFFERVALUE DECIMAL(10,2),OFFERTYPE NVARCHAR(50))  
  
INSERT INTO #IOFFER(OFFERID,OFFERNAME,OFFERCODE,STARTDATE,ENDDATE,OFFERVALUE,OFFERTYPE)  
SELECT IOFR.OFFERID,OFR.OFFERNAME,OFR.OFFERCODE,  
OFR.STARTDATE,OFR.ENDDATE,OFR.OFFERVALUE,OT.OFFERTYPENAME  
FROM DBO.UDF_GETOFFERS(@ITEMPRICEID) IOFR  
LEFT JOIN OFFER OFR ON IOFR.OFFERID = OFR.OFFERID  
LEFT JOIN OFFERTYPE OT ON OFR.OFFERTYPEID = OT.OFFERTYPEID  
WHERE IOFR.OFFERID IS NOT NULL
  
INSERT INTO #IOFFER(OFFERID,OFFERNAME,OFFERCODE,STARTDATE,ENDDATE,OFFERVALUE,OFFERTYPE)  
SELECT IOFR.DEALID,DEAL.OFFERNAME,DEAL.OFFERCODE,  
DEAL.STARTDATE,DEAL.ENDDATE,DEAL.OFFERVALUE,OT.OFFERTYPENAME  
FROM DBO.UDF_GETOFFERS(@ITEMPRICEID) IOFR  
LEFT JOIN OFFER DEAL ON IOFR.DEALID = DEAL.OFFERID  
LEFT JOIN OFFERTYPE OT ON DEAL.OFFERTYPEID = OT.OFFERTYPEID  
WHERE IOFR.DEALID IS NOT NULL
  
SELECT * FROM #IOFFER  
  
  
END  
GO
CREATE PROCEDURE [dbo].[USP_U_STOCKDISPATCH]                  
@STOCKDISPATCHID INT                  
AS                  
BEGIN                  
    
--Update stock stockdispatch status                  
UPDATE STOCKDISPATCH SET STATUS = 1  , UPDATEDATE = GETDATE()   
WHERE STOCKDISPATCHID = @STOCKDISPATCHID                  
    
--Get branch details  
DECLARE @FROMBRANCHID INT ,@TOBRANCHID INT          
SELECT @FROMBRANCHID = FROMBRANCHID, @TOBRANCHID = TOBRANCHID   
FROM STOCKDISPATCH WHERE STOCKDISPATCHID = @STOCKDISPATCHID        
          
--Updating branch stock  
--INSERT INTO STOCKSUMMARY(BRANCHID,ITEMPRICEID,INTRANSITQUANTITY,INTRANSITWEIGHTINKGS,QUANTITY,WEIGHTINKGS)  
--SELECT @TOBRANCHID,SDD.ITEMPRICEID,SDD.QUANTITY,SDD.WEIGHTINKGS,0,0  
--FROM(SELECT ITEMPRICEID,SUM(DISPATCHQUANTITY) AS QUANTITY, SUM(WEIGHTINKGS) AS WEIGHTINKGS   
--FROM STOCKDISPATCHDETAIL WHERE STOCKDISPATCHID = @STOCKDISPATCHID GROUP BY ITEMPRICEID ) SDD WHERE    
--NOT EXISTS (SELECT 1 FROM STOCKSUMMARY SS WHERE SS.BRANCHID = @TOBRANCHID AND SS.ITEMPRICEID = SDD.ITEMPRICEID)  
  
UPDATE SS  
SET SS.INTRANSITQUANTITY = ISNULL(SS.INTRANSITQUANTITY,0) + SDD.QUANTITY,  
SS.INTRANSITWEIGHTINKGS = ISNULL(SS.INTRANSITWEIGHTINKGS,0) + SDD.WEIGHTINKGS  
FROM STOCKSUMMARY SS  
INNER JOIN    
(SELECT ITEMPRICEID,SUM(DISPATCHQUANTITY) AS QUANTITY, SUM(WEIGHTINKGS) AS WEIGHTINKGS   
FROM STOCKDISPATCHDETAIL WHERE STOCKDISPATCHID = @STOCKDISPATCHID GROUP BY ITEMPRICEID )SDD ON SS.ITEMPRICEID = SDD.ITEMPRICEID  
WHERE SS.BRANCHID = @TOBRANCHID  
  
--updating warehosue stock  
  
UPDATE SS  
SET SS.QUANTITY = ISNULL(SS.QUANTITY,0) - SDD.QUANTITY,  
SS.WEIGHTINKGS = ISNULL(SS.WEIGHTINKGS,0) - SDD.WEIGHTINKGS  
FROM STOCKSUMMARY SS  
INNER JOIN    
(SELECT     
SDD.ITEMPRICEID,SUM(DISPATCHQUANTITY) AS QUANTITY,SUM(WEIGHTINKGS) AS WEIGHTINKGS     
FROM STOCKDISPATCHDETAIL SDD     
INNER JOIN ITEMPRICE IP ON SDD.ITEMPRICEID = IP.ITEMPRICEID    
INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID    
INNER JOIN ITEM I ON IC.ITEMID = I.ITEMID    
WHERE STOCKDISPATCHID = @STOCKDISPATCHID     
AND (I.PARENTITEMID IS NULL OR ISNULL(I.ISOPENITEM,0) = 1) GROUP BY SDD.ITEMPRICEID)SDD ON SS.ITEMPRICEID = SDD.ITEMPRICEID  
WHERE SS.BRANCHID = @FROMBRANCHID  
  
--updating warehouse stock in weight in kgs  
  
UPDATE SS  
SET SS.QUANTITY = 0,  
SS.WEIGHTINKGS = CASE WHEN SDD.ISOPENITEM = 1 THEN      
 ISNULL(SS.WEIGHTINKGS,0) - ISNULL(SDD.WEIGHTINKGS,0) ELSE      
 ISNULL(SS.WEIGHTINKGS,0) - ISNULL(SDD.QUANTITY * SDD.MULTIPLIER,0) END  
FROM STOCKSUMMARY SS  
INNER JOIN    
(SELECT SDD.ITEMPRICEID,SDD.DISPATCHQUANTITY AS QUANTITY,SDD.WEIGHTINKGS  
,I.PARENTITEMID  ,I.ISOPENITEM  ,U.MULTIPLIER  ,PIP.ITEMPRICEID AS PARENTITEMPRICEID  
FROM   
(SELECT SDD.ITEMPRICEID,SUM(DISPATCHQUANTITY) AS DISPATCHQUANTITY,SUM(WEIGHTINKGS) AS WEIGHTINKGS  
FROM STOCKDISPATCHDETAIL SDD WHERE STOCKDISPATCHID = @STOCKDISPATCHID GROUP BY SDD.ITEMPRICEID) SDD     
INNER JOIN ITEMPRICE IP ON SDD.ITEMPRICEID = IP.ITEMPRICEID    
INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID    
INNER JOIN ITEM I ON IC.ITEMID = I.ITEMID    
INNER JOIN UOM U ON I.UOMID = U.UOMID    
INNER JOIN ITEM PITEM ON I.PARENTITEMID = PITEM.ITEMID    
INNER JOIN ITEMCODE PIC ON PITEM.ITEMID = PIC.ITEMID    
INNER JOIN ITEMPRICE PIP ON PIC.ITEMCODEID = PIP.ITEMCODEID  
WHERE  I.PARENTITEMID IS NOT NULL AND ISNULL(I.ISOPENITEM,0) = 0 ) SDD ON SS.ITEMPRICEID = SDD.PARENTITEMPRICEID  
WHERE SS.BRANCHID = @FROMBRANCHID  
      
END 
GO
ALTER proc [dbo].[USP_R_STOCKSUMMARY]    
@BranchID INT = 0    
, @ItemID INT = 0    
AS    
BEGIN    
     
 SELECT     
  SS.STOCKSUMMARYID, B.BRANCHNAME    
  , I.SKUCODE, I.ITEMNAME, ISNULL(I.ISOPENITEM, 0) AS ISOPENITEM    
  , SS.QUANTITY, SS.INTRANSITQUANTITY, SS.WEIGHTINKGS, SS.INTRANSITWEIGHTINKGS    ,
  IC.ITEMCODE
 FROM     
  STOCKSUMMARY SS   
  INNER JOIN ITEMPRICE IP ON IP.ITEMPRICEID = SS.ITEMPRICEID  
  INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID  
  INNER JOIN ITEM I ON I.ITEMID = IC.ITEMID
  INNER JOIN BRANCH B ON B.BRANCHID = SS.BRANCHID    
 WHERE (SS.BRANCHID = @BranchID OR @BranchID = 0)    
  AND (I.ITEMID = @ItemID OR @ItemID = 0)    
    
END    
GO
USE [NSRetail_Dev]
GO

ALTER TABLE [dbo].[STOCKSUMMARY] DROP CONSTRAINT [FK__STOCKSUMM__ITEMC__58F12BAE]
GO

ALTER TABLE [dbo].[STOCKSUMMARY] DROP CONSTRAINT [FK__STOCKSUMM__BRANC__57FD0775]
GO

/****** Object:  Table [dbo].[STOCKSUMMARY]    Script Date: 26-Mar-22 10:30:39 PM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STOCKSUMMARY]') AND type in (N'U'))
DROP TABLE [dbo].[STOCKSUMMARY]
GO

/****** Object:  Table [dbo].[STOCKSUMMARY]    Script Date: 26-Mar-22 10:30:39 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[STOCKSUMMARY](
	[STOCKSUMMARYID] [int] IDENTITY(1,1) NOT NULL,
	[BRANCHID] [int] NOT NULL,
	[ITEMCODEID] [int] NOT NULL,
	[QUANTITY] [int] NOT NULL,
	[INTRANSITQUANTITY] [int] NULL,
	[WEIGHTINKGS] [decimal](9, 2) NULL,
	[INTRANSITWEIGHTINKGS] [decimal](9, 2) NULL,
PRIMARY KEY CLUSTERED 
(
	[STOCKSUMMARYID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[STOCKSUMMARY]  WITH CHECK ADD FOREIGN KEY([BRANCHID])
REFERENCES [dbo].[BRANCH] ([BRANCHID])
GO

ALTER TABLE [dbo].[STOCKSUMMARY]  WITH CHECK ADD FOREIGN KEY([ITEMCODEID])
REFERENCES [dbo].[ITEMCODE] ([ITEMCODEID])
GO
INSERT INTO STOCKSUMMARY(BRANCHID, ITEMCODEID, QUANTITY, INTRANSITQUANTITY, WEIGHTINKGS, INTRANSITWEIGHTINKGS)
SELECT B.BRANCHID, IC.ITEMCODEID, 0, 0, 0.0, 0.0
FROM
	BRANCH B 
	CROSS APPLY ITEMCODE IC
WHERE NOT EXISTS
	(
		SELECT 1 FROM STOCKSUMMARY SS 
		WHERE SS.BRANCHID = B.BRANCHID
			AND SS.ITEMCODEID = IC.ITEMCODEID
	)
GO
ALTER PROCEDURE [dbo].[USP_U_STOCKDISPATCH]                  
@STOCKDISPATCHID INT                  
AS                  
BEGIN                  
    
--Update stock stockdispatch status                  
UPDATE STOCKDISPATCH SET STATUS = 1  , UPDATEDATE = GETDATE()   
WHERE STOCKDISPATCHID = @STOCKDISPATCHID                  
    
--Get branch details  
DECLARE @FROMBRANCHID INT ,@TOBRANCHID INT          
SELECT @FROMBRANCHID = FROMBRANCHID, @TOBRANCHID = TOBRANCHID   
FROM STOCKDISPATCH WHERE STOCKDISPATCHID = @STOCKDISPATCHID        
          
UPDATE SS  
SET SS.INTRANSITQUANTITY = ISNULL(SS.INTRANSITQUANTITY,0) + SDD.QUANTITY,  
SS.INTRANSITWEIGHTINKGS = ISNULL(SS.INTRANSITWEIGHTINKGS,0) + SDD.WEIGHTINKGS  
FROM STOCKSUMMARY SS  
INNER JOIN    
(SELECT IC.ITEMCODEID,SUM(DISPATCHQUANTITY) AS QUANTITY, SUM(WEIGHTINKGS) AS WEIGHTINKGS   
FROM STOCKDISPATCHDETAIL SDD INNER JOIN  ITEMPRICE IP ON SDD.ITEMPRICEID = IP.ITEMPRICEID
INNER JOIN  ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID
WHERE STOCKDISPATCHID = @STOCKDISPATCHID GROUP BY IC.ITEMCODEID) SDD ON SS.ITEMCODEID = SDD.ITEMCODEID
WHERE SS.BRANCHID = @TOBRANCHID  
  
--updating warehosue stock  
  
UPDATE SS  
SET SS.QUANTITY = ISNULL(SS.QUANTITY,0) - SDD.QUANTITY,  
SS.WEIGHTINKGS = ISNULL(SS.WEIGHTINKGS,0) - SDD.WEIGHTINKGS  
FROM STOCKSUMMARY SS  
INNER JOIN    
(SELECT     
IC.ITEMCODEID,SUM(DISPATCHQUANTITY) AS QUANTITY,SUM(WEIGHTINKGS) AS WEIGHTINKGS
FROM STOCKDISPATCHDETAIL SDD INNER JOIN ITEMPRICE IP ON SDD.ITEMPRICEID = IP.ITEMPRICEID    
INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID    
INNER JOIN ITEM I ON IC.ITEMID = I.ITEMID WHERE STOCKDISPATCHID = @STOCKDISPATCHID     
AND (I.PARENTITEMID IS NULL OR ISNULL(I.ISOPENITEM,0) = 1) 
GROUP BY IC.ITEMCODEID)SDD ON SS.ITEMCODEID = SDD.ITEMCODEID
WHERE SS.BRANCHID = @FROMBRANCHID  
  
--updating warehouse stock in weight in kgs  
  
UPDATE SS  
SET SS.QUANTITY = 0,  
SS.WEIGHTINKGS = CASE WHEN SDD.ISOPENITEM = 1 THEN      
 ISNULL(SS.WEIGHTINKGS,0) - ISNULL(SDD.WEIGHTINKGS,0) ELSE      
 ISNULL(SS.WEIGHTINKGS,0) - ISNULL(SDD.QUANTITY * SDD.MULTIPLIER,0) END  
FROM STOCKSUMMARY SS  
INNER JOIN    
(SELECT SDD.ITEMCODEID,SDD.DISPATCHQUANTITY AS QUANTITY,SDD.WEIGHTINKGS  
,I.PARENTITEMID  ,I.ISOPENITEM  ,U.MULTIPLIER  ,PIC.ITEMCODEID AS PARENTITEMCODEID  
FROM (SELECT IC.ITEMID,IC.ITEMCODEID,
SUM(DISPATCHQUANTITY) AS DISPATCHQUANTITY,SUM(WEIGHTINKGS) AS WEIGHTINKGS  
FROM STOCKDISPATCHDETAIL SDD 
INNER JOIN ITEMPRICE IP ON SDD.ITEMPRICEID = IP.ITEMPRICEID    
INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID    
WHERE STOCKDISPATCHID = @STOCKDISPATCHID GROUP BY IC.ITEMCODEID,IC.ITEMID) SDD     
INNER JOIN ITEM I ON SDD.ITEMID = I.ITEMID    
LEFT JOIN UOM U ON I.UOMID = U.UOMID    
INNER JOIN ITEM PITEM ON I.PARENTITEMID = PITEM.ITEMID    
INNER JOIN ITEMCODE PIC ON PITEM.ITEMID = PIC.ITEMID    
WHERE  I.PARENTITEMID IS NOT NULL AND ISNULL(I.ISOPENITEM,0) = 0 ) SDD ON SS.ITEMCODEID = SDD.PARENTITEMCODEID  
WHERE SS.BRANCHID = @FROMBRANCHID  
      
END 
GO
ALTER proc [dbo].[USP_R_STOCKSUMMARY]      
@BranchID INT = 0      
, @ItemID INT = 0      
AS      
BEGIN      
       
 SELECT       
  SS.STOCKSUMMARYID, B.BRANCHNAME      
  , I.SKUCODE, I.ITEMNAME, ISNULL(I.ISOPENITEM, 0) AS ISOPENITEM      
  , SS.QUANTITY, SS.INTRANSITQUANTITY, SS.WEIGHTINKGS, SS.INTRANSITWEIGHTINKGS    ,  
  IC.ITEMCODE  
 FROM       
  STOCKSUMMARY SS     
  INNER JOIN ITEMCODE IC ON SS.ITEMCODEID = IC.ITEMCODEID    
  INNER JOIN ITEM I ON I.ITEMID = IC.ITEMID  
  INNER JOIN BRANCH B ON B.BRANCHID = SS.BRANCHID      
 WHERE (SS.BRANCHID = @BranchID OR @BranchID = 0)      
  AND (I.ITEMID = @ItemID OR @ItemID = 0)      
      
END 
GO
ALTER PROCEDURE [dbo].[USP_U_STOCKENTRY]                  
@STOCKENTRYID INT ,            
@TCS DECIMAL(10,2) = 0,            
@DISCOUNTPER DECIMAL(10,2) = 0,            
@DISCOUNTFLAT DECIMAL(10,2) = 0,            
@EXPENSES DECIMAL(10,2) = 0,            
@TRANSPORT DECIMAL(10,2)= 0            
            
AS                  
BEGIN                  
                  
UPDATE STOCKENTRY SET STATUS = 1,            
TCS = @TCS,            
DISCOUNTPER = @DISCOUNTPER,            
DISCOUNT = @DISCOUNTFLAT,            
EXPENSES = @EXPENSES,            
TRANSPORT = @TRANSPORT            
WHERE STOCKENTRYID = @STOCKENTRYID                 
            
DECLARE @WareHouseID INT                
SELECT @WareHouseID = BRANCHID FROM BRANCH WHERE ISWAREHOUSE = 1                

UPDATE SS
SET SS.QUANTITY = SS.QUANTITY + SED.QUANTITY,
SS.WEIGHTINKGS = SS.WEIGHTINKGS + SED.WEIGHTINKGS
FROM STOCKSUMMARY SS INNER JOIN 
(SELECT IC.ITEMCODEID,SUM(SED.QUANTITY) AS QUANTITY,SUM(SED.WEIGHTINKGS) AS WEIGHTINKGS 
FROM STOCKENTRYDETAIL SED  
INNER JOIN ITEMCOSTPRICE ICP ON SED.ITEMCOSTPRICEID = ICP.ITEMCOSTPRICEID        
INNER JOIN ITEMPRICE IP ON ICP.ITEMPRICEID = IP.ITEMPRICEID   
INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID
WHERE STOCKENTRYID = @STOCKENTRYID
GROUP BY IC.ITEMCODEID) SED ON SS.ITEMCODEID = SED.ITEMCODEID

END
GO
ALTER PROC [dbo].[USP_CU_ITEMCODE]    
@ItemCodeID INT = 0    
, @ItemID INT = 0    
, @ItemName VARCHAR(100)    
, @ItemCode VARCHAR(20)    
, @Description VARCHAR(500) = NULL    
, @CategoryID INT    
, @SubCategoryID INT  = NULL  
, @HSNCode VARCHAR(10) = NULL    
, @IsEAN BIT    
, @SKUCode VARCHAR(10)     
, @CostPriceWT DECIMAL(11, 4)    
, @CostPriceWOT DECIMAL(11, 4)    
, @SalePrice DECIMAL(10, 2)    
, @MRP DECIMAL(10, 2)    
, @GSTID INT    
, @UserID INT    
, @IsOpenItem BIT = 0    
, @ParentItemID INT = NULL    
, @UOMID INT = NULL    
, @FreeItemCodeID INT = NULL    
AS    
BEGIN    
    
 --Pre-write validations    
 IF EXISTS (SELECT 1 FROM ITEM I WHERE I.SKUCODE = @SKUCode AND I.DELETEDDATE IS NULL AND I.ITEMID != @ItemID)    
 BEGIN    
  SELECT 'Item SKU code already exists'    
  RETURN    
 END    
    
 IF EXISTS (SELECT 1 FROM ITEMCODE IC WHERE IC.ITEMCODE = @ItemCode AND IC.DELETEDDATE IS NULL AND IC.ITEMCODEID != @ItemCodeID)    
 BEGIN    
  SELECT 'Item code already exists'    
  RETURN    
 END    
    
 -- End Validations    
    
 -- pre clean variable not to violate FK relations    
    
 IF @ParentItemID <= 0    
 BEGIN    
  SET @ParentItemID = NULL    
 END    
     
 IF @UOMID <= 0    
 BEGIN    
  SET @UOMID = NULL    
 END    
     
 IF @FreeItemCodeID <= 0    
 BEGIN    
  SET @FreeItemCodeID = NULL    
 END    
    
 -- end pre clean    
    
 IF @ItemID > 0    
 BEGIN    
  UPDATE ITEM    
  SET    
   SKUCODE = @SKUCode    
   , ITEMNAME = @ItemName    
   , DESCRIPTION = @Description    
   , CATEGORYID = @CategoryID    
   , UPDATEDBY = @UserID    
   , UPDATEDATE = GETDATE()    
   , ISOPENITEM = @IsOpenItem    
   , PARENTITEMID = @ParentItemID    
   , SUBCATEGORYID = @SubCategoryID    
   , UOMID = @UOMID    
  WHERE ITEMID = @ItemID    
 END    
 ELSE    
 BEGIN    
  INSERT INTO ITEM(SKUCODE, ITEMNAME, DESCRIPTION, CATEGORYID,   
  CREATEDBY, CREATEDDATE, ISOPENITEM, SUBCATEGORYID, PARENTITEMID, UOMID)    
  SELECT @SKUCode, @ItemName, @Description, @CategoryID,   
  @UserID, GETDATE(), @IsOpenItem, @SubCategoryID, @ParentItemID, @UOMID    
    
  SET @ItemID = SCOPE_IDENTITY()    
    
  --IF @ParentItemID > 0    
  --BEGIN    
  -- UPDATE ITEM SET PARENTITEMID = @ParentItemID WHERE ITEMID = @ItemID    
  --END    
  --IF @UOMID > 0    
  --BEGIN    
  -- UPDATE ITEM SET UOMID = @UOMID WHERE ITEMID = @ItemID    
  --END    
 END    
    
 -- Store Item Code    
 IF @ItemCodeID > 0    
 BEGIN    
  UPDATE ITEMCODE    
  SET    
   ITEMCODE = @ItemCode    
   , ISEAN = @IsEAN    
   , HSNCODE = @HSNCode    
   , UPDATEDBY = @UserID    
   , UPDATEDATE = GETDATE()    
   , FREEITEMCODEID = @FreeItemCodeID    
  WHERE ITEMCODEID = @ItemCodeID    
 END    
 ELSE    
 BEGIN    
  INSERT INTO ITEMCODE(ITEMCODE, ITEMID, HSNCODE, ISEAN,   
  CREATEDBY, CREATEDDATE, FREEITEMCODEID)    
  SELECT @ItemCode, @ItemID, @HSNCode, @IsEAN,   
  @UserID, GETDATE(), @FreeItemCodeID    
    
  SET @ItemCodeID = SCOPE_IDENTITY()    

  INSERT INTO STOCKSUMMARY(BRANCHID, ITEMCODEID, QUANTITY, INTRANSITQUANTITY, WEIGHTINKGS, INTRANSITWEIGHTINKGS)  
  SELECT BRANCHID, @ItemCodeID, 0, 0, 0.00, 0.00 FROM BRANCH WHERE DELETEDDATE IS NULL  

 END    
     
 -- Store Item Price    
 DECLARE @ITEMPRICEID INT = 0  
   
 SELECT @ITEMPRICEID = ITEMPRICEID FROM ITEMPRICE IP WHERE     
  IP.ITEMCODEID = @ItemCodeID AND IP.SALEPRICE = @SalePrice AND IP.MRP = @MRP   
  AND IP.GSTID = @GSTID AND IP.DELETEDDATE IS NULL  
  
 IF @ITEMPRICEID = 0    
 BEGIN    
  INSERT INTO ITEMPRICE(ITEMCODEID, SALEPRICE, MRP, GSTID, CREATEDBY, CREATEDDATE)    
  SELECT @ItemCodeID, @SalePrice, @MRP, @GSTID, @UserID, GETDATE()    
  SET @ITEMPRICEID = SCOPE_IDENTITY()  
  
 END    
  
 --DECLARE @ZeroGSTID INT    
 --SELECT @ZeroGSTID = GSTID FROM GSTDETAIL WHERE CGST = 0 AND SGST = 0 AND IGST = 0 AND CESS = 0    
     
 --IF @FreeItemCodeID > 0 AND     
 -- NOT EXISTS    
 --  (SELECT 1 FROM ITEMPRICE IP WHERE     
 --   IP.ITEMCODEID = @FreeItemCodeID AND IP.COSTPRICEWT = 0 AND IP.COSTPRICEWOT = 0 AND     
 --   IP.SALEPRICE = 0 AND IP.MRP = 0 AND IP.GSTID = @ZeroGSTID AND IP.DELETEDDATE IS NULL)    
 --BEGIN     
 -- INSERT INTO ITEMPRICE(ITEMCODEID, COSTPRICEWT, COSTPRICEWOT, SALEPRICE, MRP, GSTID, CREATEDBY, CREATEDDATE)    
 -- SELECT @FreeItemCodeID, 0, 0, 0, 0, @ZeroGSTID, @UserID, GETDATE()    
 --END    
    
 SELECT CONCAT(@ItemCodeID, ',', @ItemID) AS ITEMANDCODEID    
    
END    
GO
ALTER PROCEDURE USP_U_BREFUND        
@dtbrd POS_BRDTYPE readonly,    
@BREFUNDID INT,    
@COUNTERID INT,    
@USERID INT    
      
AS        
BEGIN        

DECLARE @BRANCHID INT
SELECT @BRANCHID = BRANCHID FROM BRANCHCOUNTER WHERE COUNTERID = @COUNTERID
  
--Change BRefund status to accepted  
UPDATE POS_BREFUND SET     
IsAccepted = 1,    
UPDATEDBY = @USERID,    
UPDATEDDATE = GETDATE()    
WHERE COUNTERID = @COUNTERID    
AND BREFUNDID = @BREFUNDID    
  
--updating accepted quantity and weight in kgs  
  
UPDATE BRD      
SET       
BRD.ACCEPTEDQUANTITY = UBRD.ACCEPTEDQUANTITY,      
BRD.ACCEPTEDWEIGHTKGS = UBRD.ACCEPTEDWEIGHTINKGS      
FROM POS_BREFUNDDETAIL BRD      
INNER JOIN @dtbrd UBRD ON BRD.BREFUNDID = UBRD.BREFUNDID      
AND BRD.BREFUNDDETAILID = UBRD.BREFUNDDETAILID      
AND BRD.COUNTERID = UBRD.COUNTERID      
      
--Dedutcing quantity from branch quantity  

UPDATE SS
SET SS.QUANTITY = SS.QUANTITY - BRD.QUANTITY,
SS.WEIGHTINKGS = SS.WEIGHTINKGS - BRD.WEIGHTINKGS
FROM STOCKSUMMARY SS INNER JOIN
(SELECT         
   IC.ITEMCODEID,
   SUM(UBRD.ACCEPTEDQUANTITY) AS QUANTITY,        
   SUM(UBRD.ACCEPTEDWEIGHTINKGS) AS WEIGHTINKGS        
  FROM         
   @dtbrd UBRD        
   INNER JOIN ITEMPRICE IP ON  UBRD.ITEMPRICEID = IP.ITEMPRICEID
   INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID
   GROUP BY IC.ITEMCODEID) BRD ON SS.ITEMCODEID = BRD.ITEMCODEID
  
--adding quantity to warehouse  
 UPDATE SS    
SET SS.QUANTITY = ISNULL(SS.QUANTITY,0) + SDD.QUANTITY,    
SS.WEIGHTINKGS = ISNULL(SS.WEIGHTINKGS,0) + SDD.WEIGHTINKGS    
FROM STOCKSUMMARY SS    
INNER JOIN      
(SELECT       
IC.ITEMCODEID,SUM(ACCEPTEDQUANTITY) AS QUANTITY,SUM(ACCEPTEDWEIGHTINKGS) AS WEIGHTINKGS  
FROM @dtbrd BRD 
INNER JOIN ITEMPRICE IP ON BRD.ITEMPRICEID = IP.ITEMPRICEID      
INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID      
INNER JOIN ITEM I ON IC.ITEMID = I.ITEMID 
WHERE (I.PARENTITEMID IS NULL OR ISNULL(I.ISOPENITEM,0) = 1) 
GROUP BY IC.ITEMCODEID)SDD ON SS.ITEMCODEID = SDD.ITEMCODEID  
WHERE SS.BRANCHID = 45
    
--updating warehouse stock in weight in kgs    
    
UPDATE SS    
SET SS.QUANTITY = 0,    
SS.WEIGHTINKGS = CASE WHEN SDD.ISOPENITEM = 1 THEN        
 ISNULL(SS.WEIGHTINKGS,0) - ISNULL(SDD.WEIGHTINKGS,0) ELSE        
 ISNULL(SS.WEIGHTINKGS,0) - ISNULL(SDD.QUANTITY * SDD.MULTIPLIER,0) END    
FROM STOCKSUMMARY SS    
INNER JOIN      
(SELECT BRD.ITEMCODEID,BRD.QUANTITY AS QUANTITY,BRD.WEIGHTINKGS    
,I.PARENTITEMID  ,I.ISOPENITEM  ,U.MULTIPLIER  ,PIC.ITEMCODEID AS PARENTITEMCODEID    
FROM (SELECT IC.ITEMID,IC.ITEMCODEID,  
SUM(ACCEPTEDQUANTITY) AS QUANTITY,SUM(ACCEPTEDWEIGHTINKGS) AS WEIGHTINKGS    
FROM @dtbrd BRD
INNER JOIN ITEMPRICE IP ON BRD.ITEMPRICEID = IP.ITEMPRICEID      
INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID GROUP BY IC.ITEMCODEID,IC.ITEMID) BRD
INNER JOIN ITEM I ON BRD.ITEMID = I.ITEMID      
LEFT JOIN UOM U ON I.UOMID = U.UOMID      
INNER JOIN ITEM PITEM ON I.PARENTITEMID = PITEM.ITEMID      
INNER JOIN ITEMCODE PIC ON PITEM.ITEMID = PIC.ITEMID      
WHERE  I.PARENTITEMID IS NOT NULL AND ISNULL(I.ISOPENITEM,0) = 0 ) SDD ON SS.ITEMCODEID = SDD.PARENTITEMCODEID    
WHERE SS.BRANCHID = 45
        
END
GO
ALTER PROCEDURE [dbo].[USP_R_ITEMMRPLIST]          
@ITEMCODEID NVARCHAR(20)          
AS          
BEGIN          
          
SELECT IP.ITEMPRICEID,         
IP.MRP,        
IP.SALEPRICE,      
IP.GSTID,      
GD.GSTCODE,      
GD.CGST,      
GD.SGST,      
GD.IGST,      
GD.CESS      
FROM ITEMPRICE IP      
INNER JOIN GSTDETAIL GD ON IP.GSTID = GD.GSTID      
WHERE ITEMCODEID = @ITEMCODEID          
AND IP.DELETEDDATE IS NULL
          
END  
GO
CREATE PROCEDURE USP_D_ITEMPRICE
@ITEMPRICEID INT,
@USERID INT
AS
BEGIN

UPDATE ITEMPRICE SET DELETEDBY = @USERID,
DELETEDDATE = GETDATE()
WHERE ITEMPRICEID = @ITEMPRICEID

END
GO
CREATE PROCEDURE USP_U_ITEMPRICE
@ITEMPRICEID INT,
@USERID INT,
@SALEPRICE DECIMAL(10,2)
AS
BEGIN

UPDATE ITEMPRICE SET 
SALEPRICE = @SALEPRICE,
UPDATEDBY = @USERID,
UPDATEDATE = GETDATE()
WHERE ITEMPRICEID = @ITEMPRICEID

END
GO
alter PROCEDURE [dbo].[USP_U_STOCKENTRY]                    
@STOCKENTRYID INT ,              
@TCS DECIMAL(10,2) = 0,              
@DISCOUNTPER DECIMAL(10,2) = 0,              
@DISCOUNTFLAT DECIMAL(10,2) = 0,              
@EXPENSES DECIMAL(10,2) = 0,              
@TRANSPORT DECIMAL(10,2)= 0              
              
AS                    
BEGIN                    
                    
UPDATE STOCKENTRY SET STATUS = 1,              
TCS = @TCS,              
DISCOUNTPER = @DISCOUNTPER,              
DISCOUNT = @DISCOUNTFLAT,              
EXPENSES = @EXPENSES,              
TRANSPORT = @TRANSPORT              
WHERE STOCKENTRYID = @STOCKENTRYID                   
              
DECLARE @WareHouseID INT                  
SELECT @WareHouseID = BRANCHID FROM BRANCH WHERE ISWAREHOUSE = 1                  
  
UPDATE SS  
SET SS.QUANTITY = SS.QUANTITY + SED.QUANTITY,  
SS.WEIGHTINKGS = SS.WEIGHTINKGS + SED.WEIGHTINKGS  
FROM STOCKSUMMARY SS INNER JOIN   
(SELECT IC.ITEMCODEID,SUM(SED.QUANTITY) AS QUANTITY,SUM(SED.WEIGHTINKGS) AS WEIGHTINKGS   
FROM STOCKENTRYDETAIL SED    
INNER JOIN ITEMCOSTPRICE ICP ON SED.ITEMCOSTPRICEID = ICP.ITEMCOSTPRICEID          
INNER JOIN ITEMPRICE IP ON ICP.ITEMPRICEID = IP.ITEMPRICEID     
INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID  
WHERE STOCKENTRYID = @STOCKENTRYID GROUP BY IC.ITEMCODEID) SED 
ON SS.ITEMCODEID = SED.ITEMCODEID  
  
END
GO