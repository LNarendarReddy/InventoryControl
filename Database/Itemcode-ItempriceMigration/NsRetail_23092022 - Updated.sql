alter PROCEDURE [dbo].[USP_CU_BRANCH]          
@BRANCHID int = 0,          
@BRANCHNAME varchar(100),          
@BRANCHCODE varchar(5),          
@ADDRESS varchar(500),          
@STATEID INT,  
@PHONENO varchar(20),          
@LANDLINE VARCHAR(20),    
@EMAILID varchar(50),          
@SUPERVISORID INT,    
@ISWAREHOUSE BIT,    
@USERID int = 0    
AS          
BEGIN          
          
 IF @BRANCHID > 0           
 BEGIN          
  UPDATE BRANCH           
  SET        
   BRANCHNAME = @BRANCHNAME,    
   BRANCHCODE = @BRANCHCODE,    
   ADDRESS = @ADDRESS,    
   STATEID = @STATEID,  
   PHONENO = @PHONENO,    
   LANDLINE = @LANDLINE,    
   EMAILID = @EMAILID,    
   ISWAREHOUSE = @ISWAREHOUSE,    
   SUPERVISORID = @SUPERVISORID,    
   UPDATEDBY = @USERID,    
   UPDATEDATE = GETDATE()    
  WHERE BRANCHID = @BRANCHID          
 END          
 ELSE          
 BEGIN          
  INSERT INTO BRANCH (BRANCHNAME, BRANCHCODE, ADDRESS, STATEID,  
  PHONENO,LANDLINE, EMAILID, ISWAREHOUSE,SUPERVISORID,     
  CREATEDBY, CREATEDDATE)          
  VALUES (@BRANCHNAME, @BRANCHCODE, @ADDRESS,@STATEID,  
  @PHONENO,@LANDLINE, @EMAILID,@ISWAREHOUSE,@SUPERVISORID,     
  @USERID, GETDATE())          
          
  SET @BRANCHID = SCOPE_IDENTITY()      
    
  INSERT INTO STOCKSUMMARY(ITEMPRICEID, BRANCHID, QUANTITY, WEIGHTINKGS, TTYPE)  
  SELECT ITEMPRICEID, @BRANCHID, 0, 0, 'BC' FROM ITEMPRICE WHERE DELETEDDATE IS NULL
 END          
          
 SELECT @BRANCHID          
          
END       
GO
alter PROC [dbo].[USP_CU_ITEMCODE]    
@ItemCodeID INT = 0    
, @ItemID INT = 0    
, @ItemName VARCHAR(100)    
, @ItemCode VARCHAR(20)    
, @Description VARCHAR(500) = NULL    
, @CategoryID INT    
, @SubCategoryID INT  = NULL  
, @HSNCode VARCHAR(10) = NULL    
, @IsEAN BIT    
, @SKUCode VARCHAR(10)     
, @CostPriceWT DECIMAL(11, 4)    
, @CostPriceWOT DECIMAL(11, 4)    
, @SalePrice DECIMAL(10, 2)    
, @MRP DECIMAL(10, 2)    
, @GSTID INT    
, @UserID INT    
, @IsOpenItem BIT = 0    
, @ParentItemID INT = NULL    
, @UOMID INT = NULL    
, @FreeItemCodeID INT = NULL    
AS    
BEGIN    
    
 --Pre-write validations    
 IF EXISTS (SELECT 1 FROM ITEM I WHERE I.SKUCODE = @SKUCode AND I.DELETEDDATE IS NULL AND I.ITEMID != @ItemID)    
 BEGIN    
  SELECT 'Item SKU code already exists'    
  RETURN    
 END    
    
 IF EXISTS (SELECT 1 FROM ITEMCODE IC WHERE IC.ITEMCODE = @ItemCode AND IC.DELETEDDATE IS NULL AND IC.ITEMCODEID != @ItemCodeID)    
 BEGIN    
  SELECT 'Item code already exists'    
  RETURN    
 END    
    
 -- End Validations    
    
 -- pre clean variable not to violate FK relations    
    
 IF @ParentItemID <= 0    
 BEGIN    
  SET @ParentItemID = NULL    
 END    
     
 IF @UOMID <= 0    
 BEGIN    
  SET @UOMID = NULL    
 END    
     
 IF @FreeItemCodeID <= 0    
 BEGIN    
  SET @FreeItemCodeID = NULL    
 END    
    
 -- end pre clean    
    
 IF @ItemID > 0    
 BEGIN    
  UPDATE ITEM    
  SET    
   SKUCODE = @SKUCode    
   , ITEMNAME = @ItemName    
   , DESCRIPTION = @Description    
   , CATEGORYID = @CategoryID    
   , UPDATEDBY = @UserID    
   , UPDATEDATE = GETDATE()    
   , ISOPENITEM = @IsOpenItem    
   , PARENTITEMID = @ParentItemID    
   , SUBCATEGORYID = @SubCategoryID    
   , UOMID = @UOMID    
  WHERE ITEMID = @ItemID    
 END    
 ELSE    
 BEGIN    
  INSERT INTO ITEM(SKUCODE, ITEMNAME, DESCRIPTION, CATEGORYID,   
  CREATEDBY, CREATEDDATE, ISOPENITEM, SUBCATEGORYID, PARENTITEMID, UOMID)    
  SELECT @SKUCode, @ItemName, @Description, @CategoryID,   
  @UserID, GETDATE(), @IsOpenItem, @SubCategoryID, @ParentItemID, @UOMID    
    
  SET @ItemID = SCOPE_IDENTITY()    
    
  --IF @ParentItemID > 0    
  --BEGIN    
  -- UPDATE ITEM SET PARENTITEMID = @ParentItemID WHERE ITEMID = @ItemID    
  --END    
  --IF @UOMID > 0    
  --BEGIN    
  -- UPDATE ITEM SET UOMID = @UOMID WHERE ITEMID = @ItemID    
  --END    
 END    
    
 -- Store Item Code    
 IF @ItemCodeID > 0    
 BEGIN    
  UPDATE ITEMCODE    
  SET    
   ITEMCODE = @ItemCode   
   , ITEMID = @ItemID
   , ISEAN = @IsEAN    
   , HSNCODE = @HSNCode    
   , UPDATEDBY = @UserID    
   , UPDATEDATE = GETDATE()    
   , FREEITEMCODEID = @FreeItemCodeID    
  WHERE ITEMCODEID = @ItemCodeID    
 END    
 ELSE    
 BEGIN    
  INSERT INTO ITEMCODE(ITEMCODE, ITEMID, HSNCODE, ISEAN,   
  CREATEDBY, CREATEDDATE, FREEITEMCODEID)    
  SELECT @ItemCode, @ItemID, @HSNCode, @IsEAN,   
  @UserID, GETDATE(), @FreeItemCodeID    
    
  SET @ItemCodeID = SCOPE_IDENTITY()    

 END    
     
 -- Store Item Price    
 DECLARE @ITEMPRICEID INT = 0  
   
 SELECT @ITEMPRICEID = ITEMPRICEID FROM ITEMPRICE IP WHERE     
  IP.ITEMCODEID = @ItemCodeID AND IP.SALEPRICE = @SalePrice AND IP.MRP = @MRP   
  AND IP.GSTID = @GSTID AND IP.DELETEDDATE IS NULL  
  
 IF @ITEMPRICEID = 0    
 BEGIN    
  INSERT INTO ITEMPRICE(ITEMCODEID, SALEPRICE, MRP, GSTID, CREATEDBY, CREATEDDATE)    
  SELECT @ItemCodeID, @SalePrice, @MRP, @GSTID, @UserID, GETDATE()    
  SET @ITEMPRICEID = SCOPE_IDENTITY()  
  
  INSERT INTO STOCKSUMMARY(BRANCHID, ITEMPRICEID, QUANTITY, WEIGHTINKGS, TTYPE)  
  SELECT BRANCHID, @ITEMPRICEID, 0,  0.00, 'IC' FROM BRANCH WHERE DELETEDDATE IS NULL  
  
 END   
 
 IF NOT EXISTS 
	(
		SELECT 1 FROM ITEMCOSTPRICE ICP 
		WHERE ICP.ITEMPRICEID = @ITEMPRICEID AND ICP.DELETEDDATE IS NULL 
			AND ICP.COSTPRICEWOT = @CostPriceWOT AND ICP.COSTPRICEWT = @CostPriceWT
	)
BEGIN
	INSERT INTO ITEMCOSTPRICE(ITEMPRICEID, COSTPRICEWT, COSTPRICEWOT, QUANTITY, WEIGHTINKGS, GSTID, CREATEDBY, CREATEDDATE)
	SELECT @ITEMPRICEID,  @CostPriceWT, @CostPriceWOT, CASE WHEN @IsOpenItem = 1  THEN 0 ELSE 1 END, CASE WHEN @IsOpenItem = 1  THEN 1 ELSE 0 END
	, @GSTID, @UserID, GETDATE()
END
  
 --DECLARE @ZeroGSTID INT    
 --SELECT @ZeroGSTID = GSTID FROM GSTDETAIL WHERE CGST = 0 AND SGST = 0 AND IGST = 0 AND CESS = 0    
     
 --IF @FreeItemCodeID > 0 AND     
 -- NOT EXISTS    
 --  (SELECT 1 FROM ITEMPRICE IP WHERE     
 --   IP.ITEMCODEID = @FreeItemCodeID AND IP.COSTPRICEWT = 0 AND IP.COSTPRICEWOT = 0 AND     
 --   IP.SALEPRICE = 0 AND IP.MRP = 0 AND IP.GSTID = @ZeroGSTID AND IP.DELETEDDATE IS NULL)    
 --BEGIN     
 -- INSERT INTO ITEMPRICE(ITEMCODEID, COSTPRICEWT, COSTPRICEWOT, SALEPRICE, MRP, GSTID, CREATEDBY, CREATEDDATE)    
 -- SELECT @FreeItemCodeID, 0, 0, 0, 0, @ZeroGSTID, @UserID, GETDATE()    
 --END    
    
 SELECT CONCAT(@ItemCodeID, ',', @ItemID) AS ITEMANDCODEID    
    
END 
GO
ALTER PROCEDURE USP_CU_STOCKADJUSTMENT
@STOCKADJUSTMENTID INT = 0,
@ITEMPRICEID INT,
@BRANCHID INT,
@QUANTITY INT,
@WEIGHTINKGS DECIMAL(18,2),
@USERID INT
AS
BEGIN

	IF(@STOCKADJUSTMENTID <= 0)
	BEGIN
		
		INSERT INTO STOCKADJUSTMENT(ITEMPRICEID,BRANCHID,QUANTITY,WEIGHTINKGS,CREATEDBY,CREATEDDATE,PREVQUANTITY,PREVWEIGHTINKGS,TTYPE)
		SELECT @ITEMPRICEID,@BRANCHID,@QUANTITY,@WEIGHTINKGS,@USERID,GETDATE(), SS.QUANTITY,SS.WEIGHTINKGS,0
		FROM STOCKSUMMARY SS
		WHERE BRANCHID = @BRANCHID AND ITEMPRICEID = @ITEMPRICEID
	END

	UPDATE STOCKSUMMARY 
	SET QUANTITY = @QUANTITY,
		WEIGHTINKGS = @WEIGHTINKGS,
		TTYPE = 'SA'
	WHERE BRANCHID = @BRANCHID 
		AND ITEMPRICEID = @ITEMPRICEID

END
GO
ALTER PROC [dbo].[USP_P_DAYCLOSURES]
AS
BEGIN

	SELECT DCL.BRANCHCOUNTERID, DCL.DAYCLOSUREID
	INTO #DayClosuresToProcess
	FROM
		POS_DAYCLOSURE DCL
		INNER JOIN
			(
				SELECT PBD.BRANCHCOUNTERID, PBD.DAYCLOSUREID, COUNT(1) NOOFBILLDETAILRECS FROM POS_BILLDETAIL PBD 
				GROUP BY PBD.BRANCHCOUNTERID, PBD.DAYCLOSUREID
			) BD ON BD.BRANCHCOUNTERID = DCL.BRANCHCOUNTERID AND BD.DAYCLOSUREID = DCL.DAYCLOSUREID
		INNER JOIN
			(
				SELECT PBD.BRANCHCOUNTERID, PBD.DAYCLOSUREID, COUNT(1) NOOFBILLRECS FROM POS_BILL PBD 
				GROUP BY PBD.BRANCHCOUNTERID, PBD.DAYCLOSUREID
			) B ON B.BRANCHCOUNTERID = DCL.BRANCHCOUNTERID AND B.DAYCLOSUREID = DCL.DAYCLOSUREID
		LEFT JOIN
			(
				SELECT PBD.COUNTERID, PBD.DAYCLOSUREID, COUNT(1) NOOFCREFUNDRECS FROM POS_CREFUND PBD 
				GROUP BY PBD.COUNTERID, PBD.DAYCLOSUREID
			) CRF ON CRF.COUNTERID = DCL.BRANCHCOUNTERID AND CRF.DAYCLOSUREID = DCL.DAYCLOSUREID
	WHERE 
		ISNULL(DCL.ISPROCESSED, 0) = 0 
		AND DCL.BILLCOUNT = B.NOOFBILLRECS
		AND DCL.BILLDETAILCOUNT = BD.NOOFBILLDETAILRECS
		AND DCL.CREFUNDCOUNT = ISNULL(CRF.NOOFCREFUNDRECS, 0)

   
	MERGE STOCKSUMMARY AS Target        
	USING       
		(      
			SELECT       
				BC.BRANCHID,IP.ITEMPRICEID,SUM(BD.QUANTITY) AS QUANTITY, SUM(BD.WEIGHTINKGS) AS WEIGHTINKGS      
			FROM       
				POS_BILLDETAIL BD      
				INNER JOIN ITEMPRICE IP ON BD.ITEMPRICEID = IP.ITEMPRICEID  
				INNER JOIN POS_BILL B ON BD.BILLID = B.BILLID 
					AND BD.BRANCHCOUNTERID = B.BRANCHCOUNTERID  
				INNER JOIN #DayClosuresToProcess UDC ON B.DAYCLOSUREID = UDC.DAYCLOSUREID 
					AND B.BRANCHCOUNTERID = UDC.BRANCHCOUNTERID      
				INNER JOIN BRANCHCOUNTER BC ON B.BRANCHCOUNTERID = BC.COUNTERID      
			WHERE      
				B.DELETEDDATE IS NULL 
				AND BD.DELETEDDATE IS NULL 
				AND B.BILLSTATUS = 1 				
			GROUP BY BC.BRANCHID, IP.ITEMPRICEID  
		) AS Source              
	ON Source.BRANCHID = Target.BRANCHID AND Source.ITEMPRICEID = Target.ITEMPRICEID  
                  
	WHEN MATCHED THEN UPDATE
	SET              
		Target.QUANTITY = ISNULL(Target.QUANTITY,0) - ISNULL(Source.QUANTITY,0),              
		Target.WEIGHTINKGS = ISNULL(Target.WEIGHTINKGS,0) - ISNULL(Source.WEIGHTINKGS,0),
		Target.TTYPE = 'BS' ;      
   
	MERGE STOCKSUMMARY AS Target        
	USING       
		(      
			SELECT       
				BC.BRANCHID,IP.ITEMPRICEID, SUM(CR.REFUNDQUANTITY) AS QUANTITY, SUM(CR.REFUNDWEIGHTINKGS) AS WEIGHTINKGS      
			FROM       
				POS_CREFUND CR      
				INNER JOIN POS_BILLDETAIL BD ON CR.BILLDETAILID = BD.BILLDETAILID 
					AND CR.COUNTERID = BD.BRANCHCOUNTERID  
				INNER JOIN ITEMPRICE IP ON BD.ITEMPRICEID = IP.ITEMPRICEID  
				INNER JOIN #DayClosuresToProcess UDC ON CR.DAYCLOSUREID = UDC.DAYCLOSUREID  
					AND CR.COUNTERID = UDC.BRANCHCOUNTERID      
				INNER JOIN BRANCHCOUNTER BC ON CR.COUNTERID = BC.COUNTERID      
				AND CR.DELETEDDATE IS NULL    
			GROUP BY BC.BRANCHID,IP.ITEMPRICEID
		) AS Source              
	ON Source.BRANCHID = Target.BRANCHID AND Source.ITEMPRICEID = Target.ITEMPRICEID
                  
	WHEN MATCHED THEN UPDATE 
	SET              
		Target.QUANTITY = ISNULL(Target.QUANTITY,0) + ISNULL(Source.QUANTITY,0),              
		Target.WEIGHTINKGS = ISNULL(Target.WEIGHTINKGS,0) + ISNULL(Source.WEIGHTINKGS,0),
		Target.TTYPE = 'CR' ;      
      
	UPDATE BC    
	SET     
		BC.DAYCLOSUREID = MAXDC.MAXDAYCLOSUREID    
		, UPDATEDDATE = GETDATE()    
	FROM     
	BRANCHCOUNTER BC    
		INNER JOIN     
			(    
				SELECT DC.BRANCHCOUNTERID, MAX(DC.DAYCLOSUREID) AS MAXDAYCLOSUREID     
				FROM #DayClosuresToProcess DC     
				GROUP BY DC.BRANCHCOUNTERID    
			) MAXDC ON MAXDC.BRANCHCOUNTERID = BC.COUNTERID    
	WHERE ISNULL(BC.DAYCLOSUREID, 0) < MAXDC.MAXDAYCLOSUREID    

	UPDATE DCL
	SET DCL.ISPROCESSED = 1
	FROM
		POS_DAYCLOSURE DCL
		INNER JOIN #DayClosuresToProcess DCLTPR ON DCLTPR.DAYCLOSUREID = DCL.DAYCLOSUREID
			AND DCLTPR.BRANCHCOUNTERID = DCL.BRANCHCOUNTERID

	SELECT COUNT(1) FROM #DayClosuresToProcess

END
GO
ALTER PROCEDURE [dbo].[USP_R_BRANCHINDENT]
@BranchID INT,
@CategoryID INT,
@FromDate DATE,
@ToDate DATE
AS
BEGIN

	SELECT @ToDate = DATEADD(d, 1, @ToDate)

	SELECT ITEMID, SKUCODE, ITEMNAME, SUBCATEGORYNAME, BRANCHSTOCK, SALEQUANTITY, CASE INDENTQUANTITY WHEN 0 THEN 5 ELSE INDENTQUANTITY END AS INDENTQUANTITY
	FROM
		(
			SELECT 
				I.ITEMID, I.SKUCODE, I.ITEMNAME, SUBCAT.SUBCATEGORYNAME
				, BS.QUANTITY AS BRANCHSTOCK, ITEMSALE.SALEQUANTITY
				,  CAST(ROUND((CASE 
						WHEN  BS.QUANTITY < 0 THEN ITEMSALE.SALEQUANTITY				
						ELSE ((ITEMSALE.SALEQUANTITY) - (BS.QUANTITY))
					END  * 1.00 / 5), 0) AS INT) * 5 AS INDENTQUANTITY	
			FROM ITEM I 
				INNER JOIN 
					(
						SELECT IC.ITEMID, SUM(SSINNER.QUANTITY) AS QUANTITY, SUM(SSINNER.WEIGHTINKGS) AS WEIGHTINKGS 
						FROM STOCKSUMMARY SSINNER 
							INNER JOIN ITEMPRICE IP ON SSINNER.ITEMPRICEID = IP.ITEMPRICEID
							INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID
						WHERE BRANCHID = @BranchID
						GROUP BY IC.ITEMID
					) BS ON BS.ITEMID = I.ITEMID
				INNER JOIN	
					(
						SELECT IC.ITEMID, SUM(PBD.QUANTITY) AS SALEQUANTITY, SUM(PBD.WEIGHTINKGS) AS SALEWEIGHTINKGS
						FROM 
							POS_BILLDETAIL PBD
							INNER JOIN POS_BILL PB ON PB.BILLID = PBD.BILLID AND PB.BRANCHCOUNTERID = PBD.BRANCHCOUNTERID
							INNER JOIN BRANCHCOUNTER BC ON BC.COUNTERID = PB.BRANCHCOUNTERID
							INNER JOIN ITEMPRICE IP ON IP.ITEMPRICEID = PBD.ITEMPRICEID
							INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID
							INNER JOIN ITEM I ON I.ITEMID = IC.ITEMID
						WHERE
							BC.BRANCHID = @BranchID
							AND I.CATEGORYID = @CategoryID
							AND PB.CREATEDDATE >= @FromDate
							AND PB.CREATEDDATE <= @ToDate
							AND PB.BILLSTATUS = 1
							AND PB.DELETEDDATE IS NULL AND PBD.DELETEDDATE IS NULL
						GROUP BY IC.ITEMID
					) ITEMSALE ON ITEMSALE.ITEMID = I.ITEMID
				LEFT JOIN SUBCATEGORY SUBCAT ON SUBCAT.SUBCATEGORYID = I.SUBCATEGORYID
			WHERE 
				(((ITEMSALE.SALEQUANTITY) - (BS.QUANTITY)) * 1.00 / 5) > 0
				OR BS.QUANTITY < 0
		) BI
	ORDER BY ITEMNAME --12 DESC, 13 DESC
END
GO
ALTER PROCEDURE [dbo].[USP_R_CURRENTSTOCK]    
@FROMBRANCHID INT,    
@TOBRANCHID INT,    
@ITEMCODEID INT,    
@PARENTITEMID INT = 0    
    
AS    
BEGIN    
    
 DECLARE @FROMBRANCHSTCK DECIMAL(18,2) = 0,@TOBRANCHSTOCK DECIMAL(18,2) = 0    
 IF(@PARENTITEMID > 0)    
 BEGIN    
    
  SELECT @FROMBRANCHSTCK = SUM(WEIGHTINKGS)
  FROM STOCKSUMMARY SS    
  INNER JOIN ITEMPRICE IP ON IP.ITEMPRICEID = SS.ITEMPRICEID
  INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID    
  INNER JOIN ITEM I ON IC.ITEMID = I.ITEMID    
  WHERE BRANCHID = @FROMBRANCHID AND I.ITEMID = @PARENTITEMID    
  
  SELECT @TOBRANCHSTOCK = SUM(WEIGHTINKGS)
  FROM STOCKSUMMARY SS    
  INNER JOIN ITEMPRICE IP ON IP.ITEMPRICEID = SS.ITEMPRICEID
  INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID    
  INNER JOIN ITEM I ON IC.ITEMID = I.ITEMID    
  WHERE BRANCHID = @TOBRANCHID AND I.ITEMID = @PARENTITEMID    
    
 END    
 ELSE    
 BEGIN    
  
  SELECT @FROMBRANCHSTCK = SUM(QUANTITY)
  FROM STOCKSUMMARY SS   
  INNER JOIN ITEMPRICE IP ON IP.ITEMPRICEID = SS.ITEMPRICEID
  INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID  
  WHERE BRANCHID = @FROMBRANCHID AND IC.ITEMCODEID = @ITEMCODEID    
  
  SELECT @TOBRANCHSTOCK = SUM(QUANTITY)
  FROM STOCKSUMMARY SS  
  INNER JOIN ITEMPRICE IP ON IP.ITEMPRICEID = SS.ITEMPRICEID
  INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID    
  WHERE BRANCHID = @TOBRANCHID AND IC.ITEMCODEID = @ITEMCODEID    
  
 END    
      
 SELECT @FROMBRANCHSTCK, @TOBRANCHSTOCK    
    
END 
GO
ALTER PROCEDURE [dbo].[USP_R_DEALERINDENT]    
@DealerID INT,    
@CategoryID INT,    
@FromDate DATE,    
@ToDate DATE    
AS    
BEGIN    
  
  
	CREATE TABLE #diDetails(ITEMID INT, SKUCODE VARCHAR(100), ITEMNAME VARCHAR(200), SUBCATEGORYID INT,  
	WAREHOUSEQUANTITY INT, ALLBRANCHSTOCK INT, SALEQUANTITY INT , INDENTQUANTITY INT,DESIREDINDENT INT)  
  
	INSERT INTO #diDetails(ITEMID, SKUCODE, ITEMNAME,SUBCATEGORYID)  
	SELECT I.ITEMID,I.SKUCODE,I.ITEMNAME,I.SUBCATEGORYID FROM ITEM I   
	WHERE I.CATEGORYID = @CategoryID   
	AND EXISTS(SELECT 1 FROM ITEMCODE IC   
	INNER JOIN ITEMPRICE IP ON IC.ITEMCODEID = IP.ITEMCODEID  
	INNER JOIN ITEMCOSTPRICE ICP ON ICP.ITEMPRICEID = IP.ITEMPRICEID  
	INNER JOIN STOCKENTRYDETAIL SED ON SED.ITEMCOSTPRICEID = ICP.ITEMCOSTPRICEID  
	INNER JOIN STOCKENTRY SE ON SE.STOCKENTRYID = SED.STOCKENTRYID  
	WHERE IC.ITEMID = I.ITEMID AND SE.SUPPLIERID = @DealerID)  
  
  
	UPDATE USD SET   
	USD.WAREHOUSEQUANTITY = WHS.QUANTITY  
	FROM #diDetails USD  
	INNER JOIN 
		( 
			SELECT I.ITEMID, SUM(SS.QUANTITY) AS QUANTITY  
			FROM STOCKSUMMARY SS    
			INNER JOIN ITEMPRICE IP ON IP.ITEMPRICEID = SS.ITEMPRICEID
			INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID    
			INNER JOIN ITEM I ON  I.ITEMID = IC.ITEMID    
			WHERE SS.BRANCHID = 45 AND I.CATEGORYID = @CategoryID GROUP BY I.ITEMID
		) WHS  
	ON USD.ITEMID = WHS.ITEMID  
  
	UPDATE USD SET   
	USD.SALEQUANTITY = ITEMSALE.SALEQUANTITY  
	FROM #diDetails USD  
	INNER JOIN
	( 
		SELECT IC.ITEMID, SUM(PBD.QUANTITY) AS SALEQUANTITY  
		FROM POS_BILLDETAIL PBD    
		INNER JOIN POS_BILL PB ON PB.BILLID = PBD.BILLID AND PB.BRANCHCOUNTERID = PBD.BRANCHCOUNTERID    
		INNER JOIN BRANCHCOUNTER BC ON BC.COUNTERID = PB.BRANCHCOUNTERID    
		INNER JOIN ITEMPRICE IP ON IP.ITEMPRICEID = PBD.ITEMPRICEID    
		INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID    
		INNER JOIN ITEM I ON I.ITEMID = IC.ITEMID    
		WHERE    
		I.CATEGORYID = @CategoryID    
		AND PB.CREATEDDATE >= @FromDate    
		AND PB.CREATEDDATE <= @ToDate    
		AND PB.BILLSTATUS = 1    
		AND PBD.DELETEDDATE IS NULL GROUP BY IC.ITEMID
	) ITEMSALE  
	ON USD.ITEMID = ITEMSALE.ITEMID  
  
	UPDATE USD SET   
	USD.ALLBRANCHSTOCK = ALLBS.ALLBRANCHSTOCK  
	FROM #diDetails USD  
	INNER JOIN
	(    
		SELECT IC.ITEMID, SUM(SSINNER.QUANTITY) AS ALLBRANCHSTOCK    
		FROM STOCKSUMMARY SSINNER    
			INNER JOIN ITEMPRICE IP ON IP.ITEMPRICEID = SSINNER.ITEMPRICEID
			INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID    
			INNER JOIN ITEM I ON I.ITEMID = IC.ITEMID    
		WHERE SSINNER.BRANCHID <> 45    
			AND I.CATEGORYID = @CategoryID  
		GROUP BY IC.ITEMID    
	) ALLBS 
	ON USD.ITEMID = ALLBS.ITEMID    

	SELECT 
	ROW_NUMBER() OVER(ORDER BY I.ITEMNAME ASC) AS SNO,
	*, I.INDENTQUANTITY AS DESIREDINDENT FROM 
	(SELECT     
		 I.ITEMID, I.SKUCODE, I.ITEMNAME, SC.SUBCATEGORYNAME  
		 , I.WAREHOUSEQUANTITY, I.ALLBRANCHSTOCK, I.SALEQUANTITY    
		 ,  CAST(ROUND((    
		  CASE    
		   WHEN WAREHOUSEQUANTITY + ALLBRANCHSTOCK < 0 THEN SALEQUANTITY    
		   ELSE ((SALEQUANTITY) - (WAREHOUSEQUANTITY + ALLBRANCHSTOCK)) END) * 1.00 / 5, 0) * 5 AS INT) AS INDENTQUANTITY
	FROM #diDetails I  
	LEFT JOIN SUBCATEGORY SC ON I.SUBCATEGORYID = SC.SUBCATEGORYID  
	WHERE (((I.SALEQUANTITY / 2) - (I.WAREHOUSEQUANTITY + I.ALLBRANCHSTOCK)) * 1.00) > 0    
	) I
	ORDER BY I.ITEMNAME  
  
END
GO
ALTER PROC [dbo].[USP_R_ITEMVISUALIZER]          
@ItemID INT          
AS          
BEGIN          
          
	SELECT I.ITEMNAME, I.SKUCODE, I.DESCRIPTION          
	FROM ITEM I          
	WHERE I.ITEMID = @ItemID          
          
	SELECT           
		IP.ITEMPRICEID          
		, IP.ITEMCODEID          
		, IC.ITEMCODE          
		, ICP.COSTPRICEWT          
		, ICP.COSTPRICEWOT          
		, IP.SALEPRICE          
		, IP.MRP          
		, IP.GSTID          
		, GST.GSTCODE          
		, CU.FULLNAME AS CREATEDBY          
		, IP.CREATEDDATE          
		, UU.FULLNAME AS UPDATEDBY          
		, IP.UPDATEDATE          
	FROM  ITEMPRICE IP          
		INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID          
		INNER JOIN GSTDETAIL GST ON GST.GSTID = IP.GSTID          
		LEFT JOIN ITEMCOSTPRICE ICP ON ICP.ITEMPRICEID = IP.ITEMPRICEID        
		LEFT JOIN TBLUSER CU ON CU.USERID = IP.CREATEDBY          
		LEFT JOIN TBLUSER UU ON UU.USERID = IP.UPDATEDBY          
	WHERE IC.ITEMID = @ItemID          
          
	SELECT 
		IC.ITEMCODEID
		, IC.ITEMCODE
		, SS.BRANCHID          
		, B.BRANCHNAME          
		, SS.QUANTITY          
		, SS.WEIGHTINKGS          
	FROM           
	STOCKSUMMARY SS          
	INNER JOIN ITEMPRICE IP ON IP.ITEMPRICEID = SS.ITEMPRICEID
	INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID  
	INNER JOIN BRANCH B ON B.BRANCHID = SS.BRANCHID  
	WHERE IC.ITEMID = @ItemID  
          
END 
GO
ALTER PROCEDURE [dbo].[USP_R_STOCKCONTINGDIFF]    
@BRANCHID INT    
AS    
BEGIN    
    
	SELECT     
		SS.ITEMCODEID,IC.ITEMCODE,I.ITEMNAME,C.CATEGORYNAME,SCAT.SUBCATEGORYNAME,    
		SC.QUANTITY AS PHYSICALSTOCK,
		CASE WHEN ISNULL(I.ISOPENITEM,0) = 0 THEN SS.QUANTITY ELSE SS.WEIGHTINKGS END AS SYSTEMSTOCK,
		SC.QUANTITY - (CASE WHEN ISNULL(I.ISOPENITEM,0) = 0 THEN SS.QUANTITY ELSE SS.WEIGHTINKGS END) as STOCKDIFF, 
		ISNULL(ICPVW.COSTPRICEWT, 0) COSTPRICEWT,SC.CREATEDDATE
	FROM 
		(  
			SELECT IC.ITEMCODEID, 
			SUM(CASE WHEN ISNULL(I.ISOPENITEM,0) = 0 THEN QUANTITY ELSE WEIGHTINKGS END) AS QUANTITY,
			CAST(SCD.CREATEDDATE AS DATE) AS CREATEDDATE
			FROM 
				STOCKCOUNTINGDETAIL SCD  
				INNER JOIN ITEMPRICE IP ON SCD.ITEMPRICEID = IP.ITEMPRICEID  
				INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID  
				INNER JOIN ITEM I ON IC.ITEMID = I.ITEMID
				INNER JOIN STOCKCOUNTING SC ON SCD.STOCKCOUNTINGID = SC.STOCKCOUNTINGID    
			WHERE 
				SC.BRANCHID = @BRANCHID   
				AND (ISNULL(STATUS,0) = 0 OR ISNULL(STATUS,0) = 1)   
				AND SCD.DELETEDDATE IS NULL AND SC.DELETEDDATE IS NULL
			GROUP BY IC.ITEMCODEID,CAST(SCD.CREATEDDATE AS DATE)
		) SC    
		
		LEFT JOIN 
		(
			SELECT IP.ITEMCODEID, SUM(SSINNER.QUANTITY) AS QUANTITY, SUM(SSINNER.WEIGHTINKGS) AS WEIGHTINKGS 
			FROM STOCKSUMMARY SSINNER
				INNER JOIN ITEMPRICE IP ON IP.ITEMPRICEID = SSINNER.ITEMPRICEID
			WHERE SSINNER.BRANCHID = @BRANCHID
			GROUP BY IP.ITEMCODEID
		) SS ON SC.ITEMCODEID = SS.ITEMCODEID  

		INNER JOIN ITEMCODE IC ON SC.ITEMCODEID = IC.ITEMCODEID    
		INNER JOIN ITEM I ON IC.ITEMID = I.ITEMID    
		INNER JOIN TBLCATEGORY C ON I.CATEGORYID = C.CATEGORYID    
		LEFT JOIN SUBCATEGORY SCAT ON I.SUBCATEGORYID = SCAT.SUBCATEGORYID  
		LEFT JOIN ITEMCOSTPRICEVIEW ICPVW ON ICPVW.ITEMCODEID = IC.ITEMCODEID
    
END 
GO
ALTER PROCEDURE [dbo].[USP_R_STOCKCONTINGNOTENTERED]  
@BRANCHID INT  
AS  
BEGIN  


	SELECT DISTINCT I.CATEGORYID  
	INTO #Categories  
	FROM   
		STOCKCOUNTINGDETAIL SCD  
		INNER JOIN STOCKCOUNTING SC ON SCD.STOCKCOUNTINGID = SC .STOCKCOUNTINGID   
			AND SC.BRANCHID = @BRANCHID  
			AND ISNULL(SC.STATUS, 0) = 1  
		INNER JOIN ITEMPRICE IP ON SCD.ITEMPRICEID = IP.ITEMPRICEID  
		INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID  
		INNER JOIN ITEM I ON IC.ITEMID = I.ITEMID  
	WHERE SCD.DELETEDDATE IS NULL AND SC.DELETEDDATE IS NULL  
	GROUP BY I.CATEGORYID  
	HAVING SUM(SCD.QUANTITY) <> 0 OR SUM(SCD.WEIGHTINKGS) <> 0  

	SELECT I.SKUCODE, I.ITEMNAME, IC.ITEMCODE, C.CATEGORYNAME, SCAT.SUBCATEGORYNAME, 0 AS PHYSICALSTOCK
		, SS.QUANTITY SYSTEMSTOCK, SS.QUANTITY * -1 AS STOCKDIFF, ISNULL(ICPVW.COSTPRICEWT, 0) COSTPRICEWT
	FROM
		STOCKSUMMARY SS
		INNER JOIN ITEMPRICE IP ON IP.ITEMPRICEID = SS.ITEMPRICEID
		INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID
		INNER JOIN ITEM I ON I.ITEMID = IC.ITEMID	
		INNER JOIN TBLCATEGORY C ON I.CATEGORYID = C.CATEGORYID  
		INNER JOIN #Categories CA ON CA.CATEGORYID = C.CATEGORYID
		LEFT JOIN SUBCATEGORY SCAT ON I.SUBCATEGORYID = SCAT.SUBCATEGORYID
		LEFT JOIN ITEMCOSTPRICEVIEW ICPVW ON ICPVW.ITEMCODEID = IC.ITEMCODEID
	WHERE
		SS.QUANTITY != 0
		AND NOT EXISTS 
			(
				SELECT 1 
				FROM 
					STOCKCOUNTINGDETAIL SED 
					INNER JOIN STOCKCOUNTING SC ON SC.STOCKCOUNTINGID = SED.STOCKCOUNTINGID  
				WHERE SC.BRANCHID = @BRANCHID 
					AND ((ISNULL(STATUS,0) = 0 OR ISNULL(STATUS,0) = 1))
					AND SED.ITEMPRICEID = SS.ITEMPRICEID
					AND SED.DELETEDDATE IS NULL AND SC.DELETEDDATE IS NULL
			)
		AND SS.BRANCHID = @BRANCHID	
END
GO
ALTER proc [dbo].[USP_R_STOCKSUMMARY]          
@BranchID INT = 0, 
@ItemID INT = 0, 
@IncludeEAN BIT = 0
AS          
BEGIN          
           
	SELECT           
		B.BRANCHNAME, I.SKUCODE, I.ITEMNAME, CASE WHEN @IncludeEAN = 1 THEN IC.ITEMCODE ELSE 'All' END ITEMCODE, C.CATEGORYNAME, SC.SUBCATEGORYNAME
		, CASE WHEN ISNULL(I.ISOPENITEM, 0) = 0 THEN 'NO' ELSE 'YES' END AS ISOPENITEM          
		, SUM(SS.QUANTITY) QUANTITY, SUM(SS.WEIGHTINKGS) WEIGHTINKGS
		--, ICP.COSTPRICEWT
		--, SS.QUANTITY * ICP.COSTPRICEWT AS TOTALCOSTPRICEWT, IP.MRP, IP.SALEPRICE
		--, SS.QUANTITY * IP.SALEPRICE AS TOTALSALEPRICE
	FROM STOCKSUMMARY SS         
		INNER JOIN ITEMPRICE IP ON IP.ITEMPRICEID = SS.ITEMPRICEID
		INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID        
		INNER JOIN ITEM I ON I.ITEMID = IC.ITEMID      
		INNER JOIN TBLCATEGORY C ON I.CATEGORYID = C.CATEGORYID  
		LEFT JOIN SUBCATEGORY SC ON I.SUBCATEGORYID = SC.SUBCATEGORYID
		INNER JOIN BRANCH B ON B.BRANCHID = SS.BRANCHID          
		LEFT JOIN ITEMCOSTPRICEVIEW ICP ON IC.ITEMCODEID = ICP.ITEMCODEID
		LEFT JOIN ITEMPRICEVIEW IP1 ON IC.ITEMCODEID = IP1.ITEMCODEID
	WHERE (SS.QUANTITY <> 0 OR SS.WEIGHTINKGS <> 0)
		AND (SS.BRANCHID = @BranchID OR @BranchID = 0)          
		AND (I.ITEMID = @ItemID OR @ItemID = 0)    
	GROUP BY 
		CASE WHEN @IncludeEAN = 1 THEN I.ITEMID ELSE 0 END, B.BRANCHNAME, I.SKUCODE, I.ITEMNAME
		, CASE WHEN @IncludeEAN = 1 THEN IC.ITEMCODE ELSE 'All' END,C.CATEGORYNAME,SC.SUBCATEGORYNAME
		, CASE WHEN ISNULL(I.ISOPENITEM, 0) = 0 THEN 'NO' ELSE 'YES' END
	ORDER BY B.BRANCHNAME, I.SKUCODE, I.ITEMNAME
          
END
GO
ALTER proc [dbo].[USP_R_STOCKSUMMARY1]          
@BranchID INT = 0, 
@ItemID INT = 0
AS          
BEGIN          
    
	SELECT           
		I.ITEMID	
		 , I.SKUCODE
		, I.ITEMNAME
		, C.CATEGORYNAME
		, SC.SUBCATEGORYNAME
		, CASE WHEN ISNULL(I.ISOPENITEM, 0) = 0 THEN 'NO' ELSE 'YES' END AS ISOPENITEM          
		, SUM(SS.QUANTITY) QUANTITY
		, SUM(SS.WEIGHTINKGS) WEIGHTINKGS
	FROM STOCKSUMMARY SS         
		INNER JOIN ITEMPRICE IP ON IP.ITEMPRICEID = SS.ITEMPRICEID
		INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID        
		INNER JOIN ITEM I ON I.ITEMID = IC.ITEMID      
		INNER JOIN TBLCATEGORY C ON I.CATEGORYID = C.CATEGORYID  
		LEFT JOIN SUBCATEGORY SC ON I.SUBCATEGORYID = SC.SUBCATEGORYID
	WHERE (SS.QUANTITY <> 0 OR SS.WEIGHTINKGS <> 0) AND (SS.BRANCHID = @BranchID)          
		AND (I.ITEMID = @ItemID OR @ItemID = 0)    
	GROUP BY 
	      I.ITEMID
		, I.SKUCODE
		, I.ITEMNAME
		, C.CATEGORYNAME
		, SC.SUBCATEGORYNAME
		, CASE WHEN ISNULL(I.ISOPENITEM, 0) = 0 THEN 'NO' ELSE 'YES' END
	ORDER BY I.SKUCODE, I.ITEMNAME

	SELECT          
		  IC.ITEMID
		, IC.ITEMCODEID
		, IC.ITEMCODE
		, SS.QUANTITY
		, SS.WEIGHTINKGS
	FROM STOCKSUMMARY SS 
		INNER JOIN ITEMPRICE IP ON IP.ITEMPRICEID = SS.ITEMPRICEID
		INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID
	WHERE (SS.QUANTITY <> 0 OR SS.WEIGHTINKGS <> 0)
		AND (SS.BRANCHID = @BranchID)          
		AND (IC.ITEMID = @ItemID OR @ItemID = 0)
	ORDER BY IC.ITEMCODEID
END
GO
ALTER PROC [dbo].[USP_RPT_ZEROSTOCK]  
(  
@BranchID INT = 0 ,
@CategoryID INT = 13,
@ThresholdValue int = 0
)  
AS  
BEGIN  
  
	DECLARE @WareHouseID INT = 45  

	IF EXISTS ( SELECT 1 FROM TBLCATEGORY WHERE CATEGORYID = @CategoryID AND CATEGORYNAME IN ('PLASTIC', 'JEWELLERY', 'FOOTWARE', 'CLOTH', 'GIFT') )
	BEGIN

		SELECT
			B.BRANCHNAME, I.SKUCODE, I.ITEMNAME,CAT.CATEGORYNAME, SUBCATEGORYNAME,STOCK.BRANCHSTOCK, STOCK.WAREHOUSESTOCK
		FROM
			(
				SELECT   
					I.ITEMID, @BranchID AS BRANCHID, 
					SUM(CASE WHEN PARENTITEMCODE.ITEMID IS NULL THEN CAST(SSWAREHOUSE.QUANTITY AS decimal(14, 2)) ELSE PARENTWHSTOCK.WEIGHTINKGS END) AS WAREHOUSESTOCK, 
					SUM(CASE WHEN I.ISOPENITEM = 1 THEN SS.WEIGHTINKGS ELSE CAST(SS.QUANTITY AS decimal(14, 2)) END) AS BRANCHSTOCK
				FROM 
					(
						SELECT ITEMCODEID, SUM(QUANTITY) AS QUANTITY, SUM(WEIGHTINKGS) AS WEIGHTINKGS
						FROM STOCKSUMMARY WHERE BRANCHID = @BranchID
						GROUP BY ITEMCODEID
					) SS  
					INNER JOIN 
					(
						SELECT SSINNER.ITEMCODEID, SUM(SSINNER.QUANTITY) AS QUANTITY,
								SUM(SSINNER.WEIGHTINKGS) AS WEIGHTINKGS
						FROM STOCKSUMMARY SSINNER
							INNER JOIN ITEMPRICE IP ON SSINNER.ITEMPRICEID = IP.ITEMPRICEID
						WHERE SSINNER.BRANCHID = @WareHouseID  
						GROUP BY SSINNER.ITEMCODEID
					) SSWAREHOUSE ON SSWAREHOUSE.ITEMCODEID = SS.ITEMCODEID
					INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = SS.ITEMCODEID  
					INNER JOIN ITEM I ON I.ITEMID = IC.ITEMID
					LEFT JOIN ITEMCODE PARENTITEMCODE ON PARENTITEMCODE.ITEMID = CASE WHEN I.ISOPENITEM = 1 THEN I.ITEMID ELSE I.PARENTITEMID END
					LEFT JOIN 
					(
						SELECT SSINNER.ITEMCODEID, SUM(SSINNER.QUANTITY) AS QUANTITY,
								SUM(SSINNER.WEIGHTINKGS) AS WEIGHTINKGS
						FROM STOCKSUMMARY SSINNER
							INNER JOIN ITEMPRICE IP ON SSINNER.ITEMPRICEID = IP.ITEMPRICEID
						WHERE SSINNER.BRANCHID = @WareHouseID  
						GROUP BY SSINNER.ITEMCODEID
					) PARENTWHSTOCK ON PARENTWHSTOCK.ITEMCODEID = PARENTITEMCODE.ITEMCODEID
				WHERE  I.CATEGORYID = @CategoryID				
					--AND CASE WHEN PARENTITEMCODE.ITEMID IS NULL THEN SSWAREHOUSE.QUANTITY ELSE PARENTWHSTOCK.WEIGHTINKGS END > 0
				GROUP BY I.ITEMID
				HAVING 
					SUM(CASE WHEN I.ISOPENITEM = 1 THEN SS.WEIGHTINKGS ELSE SS.QUANTITY END) >= 0
					AND SUM(CASE WHEN I.ISOPENITEM = 1 THEN SS.WEIGHTINKGS ELSE SS.QUANTITY END) <= @ThresholdValue
					AND SUM(CASE WHEN PARENTITEMCODE.ITEMID IS NULL THEN SSWAREHOUSE.QUANTITY ELSE PARENTWHSTOCK.WEIGHTINKGS END) > 0
			) STOCK
			INNER JOIN BRANCH B ON B.BRANCHID = STOCK.BRANCHID  
			INNER JOIN ITEM I ON I.ITEMID = STOCK.ITEMID
			INNER JOIN TBLCATEGORY CAT ON CAT.CATEGORYID = I.CATEGORYID  
			LEFT JOIN SUBCATEGORY SUBCAT ON SUBCAT.SUBCATEGORYID = I.SUBCATEGORYID  
	END
	ELSE
	BEGIN

		SELECT
			B.BRANCHNAME, I.SKUCODE, I.ITEMNAME,CAT.CATEGORYNAME, SUBCATEGORYNAME,STOCK.BRANCHSTOCK, STOCK.WAREHOUSESTOCK
		FROM
			(
				SELECT   
					I.ITEMID, @BranchID AS BRANCHID, 
					SUM(CASE WHEN PARENTITEMCODE.ITEMID IS NULL THEN CAST(SSWAREHOUSE.QUANTITY AS decimal(14, 2)) ELSE PARENTWHSTOCK.WEIGHTINKGS END) AS WAREHOUSESTOCK, 
					SUM(CASE WHEN I.ISOPENITEM = 1 THEN SS.WEIGHTINKGS ELSE CAST(SS.QUANTITY AS decimal(14, 2)) END) AS BRANCHSTOCK
				FROM 
					(
						SELECT ITEMCODEID, SUM(QUANTITY) AS QUANTITY, SUM(WEIGHTINKGS) AS WEIGHTINKGS
						FROM STOCKSUMMARY WHERE BRANCHID = @BranchID
						GROUP BY ITEMCODEID
					) SS  
					INNER JOIN 
					(
						SELECT SSINNER.ITEMCODEID, SUM(SSINNER.QUANTITY) AS QUANTITY,
								SUM(SSINNER.WEIGHTINKGS) AS WEIGHTINKGS
						FROM STOCKSUMMARY SSINNER
							INNER JOIN ITEMPRICE IP ON SSINNER.ITEMPRICEID = IP.ITEMPRICEID
						WHERE SSINNER.BRANCHID = @WareHouseID  
						GROUP BY SSINNER.ITEMCODEID
					) SSWAREHOUSE ON SSWAREHOUSE.ITEMCODEID = SS.ITEMCODEID 
					INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = SS.ITEMCODEID  
					INNER JOIN ITEM I ON I.ITEMID = IC.ITEMID
					LEFT JOIN ITEMCODE PARENTITEMCODE ON PARENTITEMCODE.ITEMID = CASE WHEN I.ISOPENITEM = 1 THEN I.ITEMID ELSE I.PARENTITEMID END
					LEFT JOIN 
					(
						SELECT SSINNER.ITEMCODEID, SUM(SSINNER.QUANTITY) AS QUANTITY,
								SUM(SSINNER.WEIGHTINKGS) AS WEIGHTINKGS
						FROM STOCKSUMMARY SSINNER
							INNER JOIN ITEMPRICE IP ON SSINNER.ITEMPRICEID = IP.ITEMPRICEID
						WHERE SSINNER.BRANCHID = @WareHouseID  
						GROUP BY SSINNER.ITEMCODEID
					)
					PARENTWHSTOCK ON PARENTWHSTOCK.ITEMCODEID = PARENTITEMCODE.ITEMCODEID
				WHERE  I.CATEGORYID = @CategoryID				
					--AND CASE WHEN PARENTITEMCODE.ITEMID IS NULL THEN SSWAREHOUSE.QUANTITY ELSE PARENTWHSTOCK.WEIGHTINKGS END > 0
				GROUP BY I.ITEMID
				HAVING 
					SUM(CASE WHEN I.ISOPENITEM = 1 THEN SS.WEIGHTINKGS ELSE SS.QUANTITY END) >= 0
					AND SUM(CASE WHEN I.ISOPENITEM = 1 THEN SS.WEIGHTINKGS ELSE SS.QUANTITY END) <= @ThresholdValue
					AND SUM(CASE WHEN PARENTITEMCODE.ITEMID IS NULL THEN SSWAREHOUSE.QUANTITY ELSE PARENTWHSTOCK.WEIGHTINKGS END) > 0
			) STOCK
			INNER JOIN BRANCH B ON B.BRANCHID = STOCK.BRANCHID  
			INNER JOIN ITEM I ON I.ITEMID = STOCK.ITEMID
			INNER JOIN TBLCATEGORY CAT ON CAT.CATEGORYID = I.CATEGORYID  
			LEFT JOIN SUBCATEGORY SUBCAT ON SUBCAT.SUBCATEGORYID = I.SUBCATEGORYID  
		WHERE EXISTS
			(
				SELECT 1
				FROM
					POS_BILLDETAIL PBD
					INNER JOIN POS_BILL PB ON PB.BILLID = PBD.BILLID AND PB.BRANCHCOUNTERID = PBD.BRANCHCOUNTERID
					INNER JOIN ITEMPRICE IP ON IP.ITEMPRICEID = PBD.ITEMPRICEID
					INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID
					INNER JOIN BRANCHCOUNTER BC ON BC.COUNTERID = PB.BRANCHCOUNTERID
				WHERE 
					IC.ITEMID = STOCK.ITEMID 
					AND BC.BRANCHID = STOCK.BRANCHID 
					AND PBD.DELETEDDATE IS NULL
					AND PB.BILLSTATUS = 1
					AND PB.CREATEDDATE > CAST(DATEADD(M, -1, GETDATE()) AS DATE)
				GROUP BY BC.BRANCHID, IC.ITEMID
				HAVING SUM(QUANTITY) > 2 OR SUM(WEIGHTINKGS) > 2
			)

	END
END
GO
ALTER PROCEDURE [dbo].[USP_U_BREFUND]            
@dtbrd POS_BRDTYPE readonly,        
@BREFUNDID INT,        
@COUNTERID INT,        
@USERID INT        
          
AS            
BEGIN            
    
DECLARE @BRANCHID INT    
SELECT @BRANCHID = BRANCHID FROM BRANCHCOUNTER WHERE COUNTERID = @COUNTERID    
      
--Change BRefund status to accepted      
UPDATE POS_BREFUND SET         
IsAccepted = 1,        
UPDATEDBY = @USERID,        
UPDATEDDATE = GETDATE()        
WHERE COUNTERID = @COUNTERID        
AND BREFUNDID = @BREFUNDID        
      
--updating accepted quantity and weight in kgs      
      
UPDATE BRD          
SET           
BRD.ACCEPTEDQUANTITY = UBRD.ACCEPTEDQUANTITY,          
BRD.ACCEPTEDWEIGHTKGS = UBRD.ACCEPTEDWEIGHTINKGS          
FROM POS_BREFUNDDETAIL BRD          
INNER JOIN @dtbrd UBRD ON BRD.BREFUNDID = UBRD.BREFUNDID          
AND BRD.BREFUNDDETAILID = UBRD.BREFUNDDETAILID          
AND BRD.COUNTERID = UBRD.COUNTERID          
          
--Dedutcing quantity from branch quantity      
    
	UPDATE SS    
	SET 
		SS.QUANTITY = SS.QUANTITY - UBRD.QUANTITY,    
		SS.WEIGHTINKGS = SS.WEIGHTINKGS - UBRD.WEIGHTINKGS,
		SS.TTYPE =  'BR'
	FROM 
		STOCKSUMMARY SS 
		INNER JOIN @dtbrd UBRD ON SS.ITEMPRICEID = UBRD.ITEMPRICEID
	WHERE SS.BRANCHID = @BRANCHID
      
--adding quantity to warehouse      
	UPDATE SS        
	SET 
		SS.QUANTITY = ISNULL(SS.QUANTITY, 0) + SDD.QUANTITY,        
		SS.WEIGHTINKGS = ISNULL(SS.WEIGHTINKGS, 0) + SDD.WEIGHTINKGS        ,
		SS.TTYPE =  'BR'
	FROM 
		STOCKSUMMARY SS 
		INNER JOIN          
			(
				SELECT           
					IP.ITEMPRICEID, ACCEPTEDQUANTITY AS QUANTITY, ACCEPTEDWEIGHTINKGS AS WEIGHTINKGS      
				FROM @dtbrd BRD     
					INNER JOIN ITEMPRICE IP ON BRD.ITEMPRICEID = IP.ITEMPRICEID          
					INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID          
					INNER JOIN ITEM I ON IC.ITEMID = I.ITEMID     
				WHERE (I.PARENTITEMID IS NULL OR ISNULL(I.ISOPENITEM, 0) = 1)     
			) SDD ON SS.ITEMPRICEID = SDD.ITEMPRICEID
	WHERE SS.BRANCHID = 45    
        
--updating warehouse stock in weight in kgs        
        
UPDATE SS        
SET 
	SS.QUANTITY = 0,        
	SS.WEIGHTINKGS = ISNULL(SS.WEIGHTINKGS,0) + ISNULL(SDD.WEIGHTINKGS,0)      ,
	SS.TTYPE =  'BR'
FROM 
	STOCKSUMMARY SS        
	INNER JOIN          
		(
			SELECT TOP(1) BRD.QUANTITY * U.MULTIPLIER AS WEIGHTINKGS, PIP.ITEMPRICEID AS PARENTITEMPRICEID
			FROM 
				(
					SELECT IC.ITEMID, SUM(ACCEPTEDQUANTITY) AS QUANTITY, SUM(ACCEPTEDWEIGHTINKGS) AS WEIGHTINKGS        
					FROM 
						@dtbrd BRD    
						INNER JOIN ITEMPRICE IP ON BRD.ITEMPRICEID = IP.ITEMPRICEID          
						INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID 
					GROUP BY IC.ITEMID
				) BRD    
				INNER JOIN ITEM I ON BRD.ITEMID = I.ITEMID          
				LEFT JOIN UOM U ON I.UOMID = U.UOMID          
				INNER JOIN ITEM PITEM ON I.PARENTITEMID = PITEM.ITEMID          
				INNER JOIN ITEMCODE PIC ON PITEM.ITEMID = PIC.ITEMID          
				INNER JOIN ITEMPRICE PIP ON PIC.ITEMCODEID = PIP.ITEMCODEID
			WHERE  I.PARENTITEMID IS NOT NULL 
					AND ISNULL(I.ISOPENITEM,0) = 0
					AND PIP.DELETEDDATE IS NULL
			ORDER BY PIP.ITEMPRICEID DESC
		) SDD ON SS.ITEMPRICEID = SDD.PARENTITEMPRICEID
WHERE SS.BRANCHID = 45    
            
END
GO
ALTER PROCEDURE [dbo].[USP_U_STOCKCOUNTING]  
@BRANCHID INT  
AS  
BEGIN  
  
 IF EXISTS(SELECT 1 FROM STOCKCOUNTING WHERE BRANCHID = @BRANCHID AND ISNULL(STATUS, 0) = 0 AND DELETEDDATE IS NULL)  
 BEGIN  
  
  SELECT 'Pending sheets exists! The operation is cancelled. Submit all sheets for updating stock summary.'  
  RETURN  
 END  
  
 IF NOT EXISTS(SELECT 1 FROM STOCKCOUNTING WHERE BRANCHID = @BRANCHID AND ISNULL(STATUS, 0) = 1 AND DELETEDDATE IS NULL)  
 BEGIN  
  SELECT 'No Counting sheets exists!'  
  RETURN  
 END  
  
 SELECT DISTINCT I.CATEGORYID  
 INTO #Categories  
 FROM   
  STOCKCOUNTINGDETAIL SCD  
  INNER JOIN STOCKCOUNTING SC ON SCD.STOCKCOUNTINGID = SC .STOCKCOUNTINGID   
   AND SC.BRANCHID = @BRANCHID  
   AND ISNULL(SC.STATUS, 0) = 1  
  INNER JOIN ITEMPRICE IP ON SCD.ITEMPRICEID = IP.ITEMPRICEID  
  INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID  
  INNER JOIN ITEM I ON IC.ITEMID = I.ITEMID  
 WHERE SCD.DELETEDDATE IS NULL AND SC.DELETEDDATE IS NULL  
 GROUP BY I.CATEGORYID  
 HAVING SUM(SCD.QUANTITY) <> 0 OR SUM(SCD.WEIGHTINKGS) <> 0  
   
 --IF(@BRANCHID = 45 AND (SELECT COUNT(1) FROM #Categories) <> 1)  
 --BEGIN  
 -- SELECT 'Multiple categories exist! The operation cannot continue.'  
 -- RETURN  
 --END  
 --ELSE   
 IF(@BRANCHID <> 45 AND EXISTS   
  (  
   SELECT 1   
   FROM   
    STOCKCOUNTING SC   
    INNER JOIN STOCKCOUNTINGDETAIL SCD ON SCD.STOCKCOUNTINGID = SC.STOCKCOUNTINGID  
    INNER JOIN  ITEMPRICE IP ON SCD.ITEMPRICEID = IP.ITEMPRICEID  
    INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID  
    INNER JOIN ITEM I ON IC.ITEMID = I.ITEMID   
    INNER JOIN #Categories CAT ON CAT.CATEGORYID = I.CATEGORYID  
   WHERE  
    SC.BRANCHID = @BRANCHID  
    AND SCD.DELETEDDATE IS NULL  
    AND SC.DELETEDDATE IS NULL  
    AND SC.STATUS = 2     
  ))  
 BEGIN  
  SELECT '[Multiple categories] One or more categories in the counting are already accepted! counting data needs to be corrected. The operation has been cancelled'  
  RETURN  
 END  
    
 UPDATE SS   
 SET   
  SS.QUANTITY = SCD.QUANTITY,  
  SS.WEIGHTINKGS = SCD.WEIGHTINKGS,  
  SS.TTYPE = 'SC'  
 FROM   
  STOCKSUMMARY SS  
  INNER JOIN   
   (  
    SELECT SCD.ITEMPRICEID, SUM(QUANTITY) AS QUANTITY, SUM(WEIGHTINKGS) AS WEIGHTINKGS  
    FROM   
     STOCKCOUNTINGDETAIL SCD  
     INNER JOIN STOCKCOUNTING SC 
		ON SCD.STOCKCOUNTINGID = SC .STOCKCOUNTINGID   
				  AND SC.BRANCHID = @BRANCHID  
				  AND ISNULL(SC.STATUS, 0) = 1  
     WHERE SCD.DELETEDDATE IS NULL AND SC.DELETEDDATE IS NULL  
    GROUP BY SCD.ITEMPRICEID
   ) SCD ON SS.ITEMPRICEID = SCD.ITEMPRICEID
 WHERE   
  BRANCHID = @BRANCHID  
   
 UPDATE SS  
 SET SS.QUANTITY = 0, SS.WEIGHTINKGS = 0,  
  SS.TTYPE = 'SC'  
 FROM   
  STOCKSUMMARY SS  
  INNER JOIN ITEMPRICE IP ON IP.ITEMPRICEID = SS.ITEMPRICEID
  INNER JOIN ITEMCODE IC ON IC.ITEMCODEID = IP.ITEMCODEID  
  INNER JOIN ITEM I ON I.ITEMID = IC.ITEMID  
  INNER JOIN #Categories CAT ON CAT.CATEGORYID = I.CATEGORYID  
 WHERE  
  SS.BRANCHID = @BRANCHID  
  AND (SS.QUANTITY <> 0 OR SS.WEIGHTINKGS <> 0)
  AND NOT EXISTS   
    (  
     SELECT 1   
     FROM   
      STOCKCOUNTINGDETAIL SED   
      INNER JOIN STOCKCOUNTING SC ON SC.STOCKCOUNTINGID = SED.STOCKCOUNTINGID    
     WHERE SC.BRANCHID = @BRANCHID   
      AND (ISNULL(STATUS,0) = 0 OR ISNULL(STATUS,0) = 1)   
      AND SED.ITEMPRICEID = SS.ITEMPRICEID
      AND SED.DELETEDDATE IS NULL AND SC.DELETEDDATE IS NULL  
    )   
   
 UPDATE STOCKCOUNTING   
 SET STATUS = 2, STOCKACCEPTEDDATE = GETDATE()  
 WHERE   
  BRANCHID = @BRANCHID   
  AND ISNULL(STATUS, 0) = 1  
  
 SELECT @BRANCHID  
  
END
GO
ALTER PROCEDURE [dbo].[USP_U_STOCKDISPATCH]                      
@STOCKDISPATCHID INT                      
AS                      
BEGIN                      

	--Get branch details      
	DECLARE @FROMBRANCHID INT ,@TOBRANCHID INT,@SNO INT, @BRANCHCODE VARCHAR(20)
	
	SELECT @FROMBRANCHID = FROMBRANCHID, @TOBRANCHID = TOBRANCHID       
	FROM STOCKDISPATCH 
	WHERE STOCKDISPATCHID = @STOCKDISPATCHID            
	SELECT @BRANCHCODE = BRANCHCODE FROM BRANCH WHERE BRANCHID = @TOBRANCHID  
	SELECT @SNO = ISNULL(MAX(SNO),0) + 1 FROM STOCKDISPATCH 

	--Update stock stockdispatch status                      
	UPDATE STOCKDISPATCH 
	SET 
		DISPATCHNUMBER = @BRANCHCODE + REPLACE(CONVERT(VARCHAR(10), CREATEDDATE,111),'/','') + 
		RIGHT('0000000' + CAST(@SNO AS VARCHAR(10)),10),
		SNO = @SNO,
		STATUS = 1,
		UPDATEDATE = GETDATE()       
	WHERE STOCKDISPATCHID = @STOCKDISPATCHID                      
              
	UPDATE SS SET 
		SS.QUANTITY = ISNULL(SS.QUANTITY,0) + SDD.QUANTITY,      
		SS.WEIGHTINKGS = ISNULL(SS.WEIGHTINKGS,0) + SDD.WEIGHTINKGS,
		SS.TTYPE = 'SD'
	FROM STOCKSUMMARY SS      
	INNER JOIN        
	(
		SELECT SDD.ITEMPRICEID,
		SUM(DISPATCHQUANTITY) AS QUANTITY, 
		SUM(WEIGHTINKGS) AS WEIGHTINKGS       
		FROM STOCKDISPATCHDETAIL SDD 
		WHERE STOCKDISPATCHID = @STOCKDISPATCHID 
				and SDD.DELETEDDATE is null 
				GROUP BY SDD.ITEMPRICEID
	) SDD ON SS.ITEMPRICEID = SDD.ITEMPRICEID
	WHERE SS.BRANCHID = @TOBRANCHID      
      
--updating warehosue stock      
      
	UPDATE SS      
		SET SS.QUANTITY = ISNULL(SS.QUANTITY,0) - SDD.QUANTITY,      
		SS.WEIGHTINKGS = ISNULL(SS.WEIGHTINKGS,0) - SDD.WEIGHTINKGS      ,
		SS.TTYPE = 'SD'
	FROM STOCKSUMMARY SS      
		INNER JOIN        
	(
		SELECT SDD.ITEMPRICEID,
			SUM(DISPATCHQUANTITY) AS QUANTITY,
			SUM(WEIGHTINKGS) AS WEIGHTINKGS    
		FROM STOCKDISPATCHDETAIL SDD 
			INNER JOIN ITEMPRICE IP ON SDD.ITEMPRICEID = IP.ITEMPRICEID        
			INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID        
			INNER JOIN ITEM I ON IC.ITEMID = I.ITEMID 
		WHERE STOCKDISPATCHID = @STOCKDISPATCHID         
			AND SDD.DELETEDDATE IS NULL  
			AND (I.PARENTITEMID IS NULL OR ISNULL(I.ISOPENITEM,0) = 1)   
		GROUP BY SDD.ITEMPRICEID
	)SDD ON SS.ITEMPRICEID = SDD.ITEMPRICEID
	WHERE SS.BRANCHID = @FROMBRANCHID      
      
--updating warehouse stock in weight in kgs      
      
	UPDATE SS      
		SET SS.QUANTITY = 0,      
		SS.WEIGHTINKGS = ISNULL(SS.WEIGHTINKGS,0) - ISNULL(SDD.WEIGHTINKGS, 0),
		SS.TTYPE = 'SD'
	FROM 
		STOCKSUMMARY SS      
		INNER JOIN        
			(
				SELECT SUM(SDD.DISPATCHQUANTITY * U.MULTIPLIER) AS WEIGHTINKGS, PIP.ITEMPRICEID AS PARENTITEMPRICEID
				FROM 
					(
						SELECT IC.ITEMID,
							SUM(DISPATCHQUANTITY) AS DISPATCHQUANTITY,
							SUM(WEIGHTINKGS) AS WEIGHTINKGS      
						FROM 
							STOCKDISPATCHDETAIL SDD     
							INNER JOIN ITEMPRICE IP ON SDD.ITEMPRICEID = IP.ITEMPRICEID        
							INNER JOIN ITEMCODE IC ON IP.ITEMCODEID = IC.ITEMCODEID        
						WHERE
							STOCKDISPATCHID = @STOCKDISPATCHID   
								AND SDD.DELETEDDATE IS NULL  
							GROUP BY IC.ITEMID
					) SDD         
					INNER JOIN ITEM I ON SDD.ITEMID = I.ITEMID        
					LEFT JOIN UOM U ON I.UOMID = U.UOMID        
					INNER JOIN ITEM PITEM ON I.PARENTITEMID = PITEM.ITEMID        
					INNER JOIN ITEMCODE PIC ON PITEM.ITEMID = PIC.ITEMID        
					INNER JOIN ITEMPRICE PIP ON PIC.ITEMCODEID = PIP.ITEMCODEID
				WHERE  
					I.PARENTITEMID IS NOT NULL AND ISNULL(I.ISOPENITEM, 0) = 0 
				GROUP BY PIP.ITEMPRICEID
			) SDD ON SS.ITEMPRICEID = SDD.PARENTITEMPRICEID      
	WHERE SS.BRANCHID = @FROMBRANCHID      
          
END
GO

ALTER PROCEDURE USP_U_SUPPLIERRETURNS
@SupplierReturnsID int,
@UserID int
AS
BEGIN

UPDATE SUPPLIERRETURNS
SET STATUS = 1,
	UPDATEDBY  = @UserID,
	UPDATEDDATE = GETDATE()
WHERE SUPPLIERRETURNSID = @SupplierReturnsID

UPDATE SS        
	SET 
		SS.QUANTITY = ISNULL(SS.QUANTITY, 0) + SDD.QUANTITY,        
		SS.WEIGHTINKGS = ISNULL(SS.WEIGHTINKGS, 0) + SDD.WEIGHTINKGS        ,
		SS.TTYPE = 'SR'
	FROM 
		STOCKSUMMARY SS        
		INNER JOIN          
			(
				SELECT           
					ICP.ITEMPRICEID, SUM(SRD.QUANTITY) AS QUANTITY, SUM(SRD.WEIGHTINKGS) AS WEIGHTINKGS
				FROM SUPPLIERRETURNSDETAIL SRD
					INNER JOIN ITEMCOSTPRICE ICP ON ICP.ITEMCOSTPRICEID = SRD.ITEMCOSTPRICEID
				WHERE SRD.SUPPLIERRETURNSID = @SupplierReturnsID
				GROUP BY ICP.ITEMPRICEID
			) SDD ON SS.ITEMPRICEID = SDD.ITEMPRICEID
	WHERE SS.BRANCHID = 45    


END
GO

ALTER PROCEDURE [dbo].[USP_U_STOCKENTRY]                      
@STOCKENTRYID INT ,                
@TCS DECIMAL(10,2) = 0,                
@DISCOUNTPER DECIMAL(10,2) = 0,                
@DISCOUNTFLAT DECIMAL(10,2) = 0,                
@EXPENSES DECIMAL(10,2) = 0,                
@TRANSPORT DECIMAL(10,2)= 0                
                
AS                      
BEGIN                      
                      
	UPDATE STOCKENTRY 
	SET STATUS = 1,                
		TCS = @TCS,                
		DISCOUNTPER = @DISCOUNTPER,                
		DISCOUNT = @DISCOUNTFLAT,                
		EXPENSES = @EXPENSES,                
		TRANSPORT = @TRANSPORT                
	WHERE STOCKENTRYID = @STOCKENTRYID               

	UPDATE ICP
	SET QUANTITY = ISNULL(ICP.QUANTITY, 0) + ISNULL(SED.QUANTITY, 0), 
		WEIGHTINKGS = ISNULL(ICP.WEIGHTINKGS, 0.00) + ISNULL(SED.WEIGHTINKGS, 0.00) 
	FROM
		ITEMCOSTPRICE ICP
		INNER JOIN STOCKENTRYDETAIL SED ON SED.ITEMCOSTPRICEID = ICP.ITEMCOSTPRICEID
	WHERE SED.STOCKENTRYID = @STOCKENTRYID
		AND SED.DELETEDDATE IS NULL
                
	DECLARE @WareHouseID INT                    
	SELECT @WareHouseID = BRANCHID FROM BRANCH WHERE ISWAREHOUSE = 1                    
    
	UPDATE SS    
	SET SS.QUANTITY = SS.QUANTITY + SED.QUANTITY,    
		SS.WEIGHTINKGS = SS.WEIGHTINKGS + SED.WEIGHTINKGS    ,
		SS.TTYPE = 'SE'
	FROM STOCKSUMMARY SS 
	INNER JOIN 
	(
		SELECT ICP.ITEMPRICEID,SUM(SED.QUANTITY) AS QUANTITY,SUM(SED.WEIGHTINKGS) AS WEIGHTINKGS     
		FROM STOCKENTRYDETAIL SED      
			INNER JOIN ITEMCOSTPRICE ICP ON SED.ITEMCOSTPRICEID = ICP.ITEMCOSTPRICEID            
		WHERE STOCKENTRYID = @STOCKENTRYID AND SED.DELETEDDATE IS NULL GROUP BY ICP.ITEMPRICEID
	) SED ON SS.ITEMPRICEID = SED.ITEMPRICEID
	WHERE SS.BRANCHID = @WareHouseID  
    
END 
GO
ALTER PROC [dbo].[USP_RPT_ITEMSUMMARY]
(
	@BranchID INT = 0
	, @FromDate DATE = NULL
	, @ToDate DATE = NULL
	, @ItemCodeID INT 
	, @IncludeBillNumber BIT = 0
)
AS
BEGIN
	IF @ToDate IS NOT NULL
	BEGIN
		SET @ToDate =  DATEADD(D, 1, @ToDate)
	END

	DECLARE @IsOpenItem BIT, @ParentItemID INT
	SELECT	@IsOpenItem = I.ISOPENITEM, @ParentItemID = I.ITEMID FROM ITEM I INNER JOIN ITEMCODE IC ON IC.ITEMID = I.ITEMID WHERE IC.ITEMCODEID = @ItemCodeID

	IF @IsOpenItem = 1 
	BEGIN
		-- test

		CREATE TABLE #ItemSummary(BRANCHID INT, BRANCHNAME VARCHAR(100), BRANCHCODE VARCHAR(20), BRANCHSTOCK DECIMAL(11, 2), DISPATCHQUANTITY DECIMAL(11, 2), 
			SALEQUANTITY DECIMAL(11, 2), BREFUNDQUANTITY DECIMAL(11, 2), CREFUNDQUANTITY DECIMAL(11, 2))
		
		INSERT INTO #ItemSummary(BRANCHID, BRANCHNAME, BRANCHCODE, BRANCHSTOCK, DISPATCHQUANTITY)
 		SELECT B.BRANCHID, B.BRANCHNAME, B.BRANCHCODE,  ISNULL(SUM(ALLBS.QUANTITY * UOM.MULTIPLIER), 0.00), ISNULL(SUM(SD.DISPATCHQUANTITY), 0)
		FROM
			BRANCH B
			CROSS APPLY ITEMCODE IC
			INNER JOIN ITEM I ON I.ITEMID = IC.ITEMID
			LEFT JOIN UOM UOM ON UOM.UOMID = I.UOMID
			INNER JOIN  
			(
				SELECT 
					SSINNER.BRANCHID,
					IP.ITEMCODEID, 
					SUM(QUANTITY) AS QUANTITY, 
					SUM(WEIGHTINKGS) AS WEIGHTINKGS  
				FROM STOCKSUMMARY SSINNER
				INNER JOIN ITEMPRICE IP ON SSINNER.ITEMPRICEID = IP.ITEMPRICEID
				WHERE BRANCHID <> 45
				GROUP BY BRANCHID,IP.ITEMCODEID
			)
			ALLBS ON ALLBS.BRANCHID = B.BRANCHID AND ALLBS.ITEMCODEID = IC.ITEMCODEID
			LEFT JOIN 
				(
					SELECT BINNER.BRANCHID, IC.ITEMID, SUM(SED.WEIGHTINKGS) AS DISPATCHQUANTITY
					FROM
						STOCKDISPATCHDETAIL SED WITH(NOLOCK) 
						INNER JOIN STOCKDISPATCH SD WITH(NOLOCK) ON SD.STOCKDISPATCHID = SED.STOCKDISPATCHID
						INNER JOIN ITEMPRICE IP WITH(NOLOCK) ON IP.ITEMPRICEID = SED.ITEMPRICEID
						INNER JOIN ITEMCODE IC WITH(NOLOCK) ON IC.ITEMCODEID = IP.ITEMCODEID
						INNER JOIN BRANCH BINNER WITH(NOLOCK) ON BINNER.BRANCHID = SD.TOBRANCHID
					WHERE						
						(SD.TOBRANCHID = @BranchID OR @BranchID = 0)
						AND (@FromDate IS NULL OR SD.CREATEDDATE > @FromDate)
						AND (@ToDate IS NULL OR SD.CREATEDDATE < @ToDate)
						AND SED.DELETEDDATE IS NULL AND SD.DELETEDDATE IS NULL
					GROUP BY BINNER.BRANCHID, IC.ITEMID
				) SD ON SD.BRANCHID = B.BRANCHID AND SD.ITEMID = I.ITEMID 
			WHERE 
				(B.BRANCHID = @BranchID OR @BranchID = 0)
				AND I.PARENTITEMID = @ParentItemID
			GROUP BY B.BRANCHID, B.BRANCHNAME, B.BRANCHCODE


			INSERT INTO #ItemSummary(BRANCHID, BRANCHNAME, BRANCHCODE, BRANCHSTOCK, DISPATCHQUANTITY, SALEQUANTITY, BREFUNDQUANTITY, CREFUNDQUANTITY)
 			SELECT B.BRANCHID, B.BRANCHNAME, B.BRANCHCODE,  SUM(ALLBS.WEIGHTINKGS), 0, 0, 0, 0
			FROM
				BRANCH B
				CROSS APPLY ITEMCODE IC
				INNER JOIN ITEM I ON I.ITEMID = IC.ITEMID
				LEFT JOIN UOM UOM ON UOM.UOMID = I.UOMID
				INNER JOIN 
				(
					SELECT SSINNER.BRANCHID, IP.ITEMCODEID,SUM(SSINNER.QUANTITY) AS QUANTITY, SUM(SSINNER.WEIGHTINKGS) AS WEIGHTINKGS FROM STOCKSUMMARY SSINNER 
						INNER JOIN ITEMPRICE IP ON SSINNER.ITEMPRICEID = IP.ITEMPRICEID
					WHERE BRANCHID = 45
					GROUP BY SSINNER.BRANCHID, IP.ITEMCODEID
				) ALLBS ON ALLBS.BRANCHID = B.BRANCHID AND ALLBS.ITEMCODEID = IC.ITEMCODEID 
			WHERE I.ITEMID = @ParentItemID
			GROUP BY B.BRANCHID, B.BRANCHNAME, B.BRANCHCODE

			UPDATE HIS
			SET HIS.SALEQUANTITY = ITEMSALE.SALEQUANTITY
			FROM
				#ItemSummary HIS
				LEFT JOIN 
					(
						SELECT BINNER.BRANCHID, SUM(PBD.QUANTITY * UOM.MULTIPLIER) AS SALEQUANTITY
						FROM
							POS_BILLDETAIL PBD WITH(NOLOCK)
							INNER JOIN POS_BILL PB WITH(NOLOCK) ON PB.BILLID = PBD.BILLID AND PB.BRANCHCOUNTERID = PBD.BRANCHCOUNTERID
							INNER JOIN BRANCHCOUNTER BC WITH(NOLOCK) ON BC.COUNTERID = PBD.BRANCHCOUNTERID
							INNER JOIN BRANCH BINNER WITH(NOLOCK) ON BINNER.BRANCHID = BC.BRANCHID
							INNER JOIN ITEMPRICE IP WITH(NOLOCK) ON IP.ITEMPRICEID = PBD.ITEMPRICEID
							INNER JOIN ITEMCODE IC WITH(NOLOCK) ON IC.ITEMCODEID = IP.ITEMCODEID
							INNER JOIN ITEM I WITH(NOLOCK) ON I.ITEMID = IC.ITEMID
							INNER JOIN UOM UOM WITH(NOLOCK) ON UOM.UOMID = I.UOMID 
						WHERE
							(BINNER.BRANCHID = @BranchID OR @BranchID = 0)
							AND (@FromDate IS NULL OR PB.CREATEDDATE > @FromDate)
							AND (@ToDate IS NULL OR PB.CREATEDDATE < @ToDate)
							AND PBD.DELETEDDATE IS NULL AND PB.DELETEDDATE IS NULL
							AND PB.DAYCLOSUREID IS NOT NULL
							AND I.PARENTITEMID = @ParentItemID
						GROUP BY BINNER.BRANCHID	
					) ITEMSALE ON ITEMSALE.BRANCHID = HIS.BRANCHID


			UPDATE HIS
			SET HIS.BREFUNDQUANTITY = BREFUND.BREFUNDQUANTITY
			FROM
				#ItemSummary HIS
				LEFT JOIN 
					(
						SELECT PBR.BRANCHID, SUM(PBRD.QUANTITY* UOM.MULTIPLIER) AS BREFUNDQUANTITY
						FROM
							POS_BREFUNDDETAIL PBRD WITH(NOLOCK) 
							INNER JOIN POS_BREFUND PBR WITH(NOLOCK) ON PBR.BREFUNDID = PBRD.BREFUNDID AND PBR.COUNTERID =  PBRD.COUNTERID
							INNER JOIN ITEMPRICE IP WITH(NOLOCK) ON IP.ITEMPRICEID = PBRD.ITEMPRICEID
							INNER JOIN ITEMCODE IC WITH(NOLOCK) ON IC.ITEMCODEID = IP.ITEMCODEID
							INNER JOIN ITEM I WITH(NOLOCK) ON I.ITEMID = IC.ITEMID
							INNER JOIN UOM UOM WITH(NOLOCK) ON UOM.UOMID = I.UOMID 
						WHERE
							(PBR.BRANCHID = @BranchID OR @BranchID = 0)
							AND (@FromDate IS NULL OR PBR.CREATEDATE > @FromDate)
							AND (@ToDate IS NULL OR PBR.CREATEDATE < @ToDate)
							AND PBRD.DELETEDDATE IS NULL AND PBR.DELETEDDATE IS NULL	
							AND PBR.IsAccepted = 1
							AND I.PARENTITEMID = @ParentItemID
						GROUP BY PBR.BRANCHID
					) BREFUND ON BREFUND.BRANCHID = HIS.BRANCHID

			UPDATE HIS
			SET HIS.CREFUNDQUANTITY = CREFUND.CREFUNDQUANTITY
			FROM
				#ItemSummary HIS
				LEFT JOIN
					(
						SELECT BC.BRANCHID, SUM(PCR.REFUNDQUANTITY * UOM.MULTIPLIER) AS CREFUNDQUANTITY
						FROM
							POS_CREFUND PCR WITH(NOLOCK) 
							INNER JOIN POS_BILLDETAIL PBD WITH(NOLOCK) ON PBD.BILLDETAILID = PCR.BILLDETAILID AND PBD.BRANCHCOUNTERID = PCR.COUNTERID
							INNER JOIN POS_BILL PB WITH(NOLOCK) ON PB.BILLID = PBD.BILLID AND PB.BRANCHCOUNTERID = PBD.BRANCHCOUNTERID
							INNER JOIN BRANCHCOUNTER BC WITH(NOLOCK) ON BC.COUNTERID = PCR.COUNTERID
							INNER JOIN ITEMPRICE IP WITH(NOLOCK) ON IP.ITEMPRICEID = PBD.ITEMPRICEID
							INNER JOIN ITEMCODE IC WITH(NOLOCK) ON IC.ITEMCODEID = IP.ITEMCODEID
							INNER JOIN ITEM I WITH(NOLOCK) ON I.ITEMID = IC.ITEMID
							INNER JOIN UOM UOM WITH(NOLOCK) ON UOM.UOMID = I.UOMID 
						WHERE
							IP.ITEMCODEID = @ItemCodeID
							AND (BC.BRANCHID = @BranchID OR @BranchID = 0)
							AND (@FromDate IS NULL OR PCR.CREATEDDATE > @FromDate)
							AND (@ToDate IS NULL OR PCR.CREATEDDATE < @ToDate)
							AND PCR.DELETEDDATE IS NULL AND PBD.DELETEDDATE IS NULL AND PB.DELETEDDATE IS NULL
						GROUP BY BC.BRANCHID
					) CREFUND ON CREFUND.BRANCHID = HIS.BRANCHID



			SELECT BRANCHID, BRANCHNAME, BRANCHCODE, BRANCHSTOCK, ISNULL(DISPATCHQUANTITY, 0) DISPATCHQUANTITY, ISNULL(SALEQUANTITY, 0) SALEQUANTITY
				, ISNULL(BREFUNDQUANTITY, 0) BREFUNDQUANTITY, ISNULL(CREFUNDQUANTITY, 0) CREFUNDQUANTITY FROM #ItemSummary ORDER BY BRANCHCODE

			SELECT SED.STOCKENTRYDETAILID, SED.STOCKENTRYID, DLR.DEALERNAME, SE.SUPPLIERINVOICENO, SE.CREATEDDATE, IP.MRP, IP.SALEPRICE, SED.QUANTITY, SED.WEIGHTINKGS
			FROM
				STOCKENTRYDETAIL SED WITH(NOLOCK) 
				INNER JOIN STOCKENTRY SE WITH(NOLOCK) ON SE.STOCKENTRYID = SED.STOCKENTRYID
				INNER JOIN ITEMCOSTPRICE ICP WITH(NOLOCK) ON ICP.ITEMCOSTPRICEID = SED.ITEMCOSTPRICEID
				INNER JOIN ITEMPRICE IP WITH(NOLOCK) ON IP.ITEMPRICEID = ICP.ITEMPRICEID
				INNER JOIN TBLDEALER DLR WITH(NOLOCK) ON DLR.DEALERID = SE.SUPPLIERID
			WHERE
				IP.ITEMCODEID = @ItemCodeID
				AND (@FromDate IS NULL OR SE.CREATEDDATE > @FromDate)
				AND (@ToDate IS NULL OR SE.CREATEDDATE < @ToDate)
				AND SED.DELETEDDATE IS NULL AND SE.DELETEDDATE IS NULL

		RETURN
	END

	SELECT B.BRANCHID, B.BRANCHNAME, B.BRANCHCODE, ALLBS.QUANTITY AS BRANCHSTOCK
		, ISNULL(SD.DISPATCHQUANTITY, 0) DISPATCHQUANTITY, ISNULL(ITEMSALE.SALEQUANTITY, 0) SALEQUANTITY
		, ISNULL(BREFUND.BREFUNDQUANTITY, 0) BREFUNDQUANTITY, ISNULL(CREFUND.CREFUNDQUANTITY, 0) CREFUNDQUANTITY
	FROM
		BRANCH B 
		CROSS APPLY ITEMCODE IC 
		INNER JOIN 
		(
			SELECT 
				SSINNER.BRANCHID, 
				IP.ITEMCODEID,
				SUM(SSINNER.QUANTITY) AS QUANTITY, 
				SUM(SSINNER.WEIGHTINKGS) AS WEIGHTINKGS 
			FROM STOCKSUMMARY SSINNER 
				INNER JOIN ITEMPRICE IP ON SSINNER.ITEMPRICEID = IP.ITEMPRICEID
			GROUP BY SSINNER.BRANCHID, IP.ITEMCODEID
		)
		ALLBS ON ALLBS.BRANCHID = B.BRANCHID AND ALLBS.ITEMCODEID = IC.ITEMCODEID
		LEFT JOIN 
			(
				SELECT BINNER.BRANCHID, SUM(SED.DISPATCHQUANTITY) AS DISPATCHQUANTITY
				FROM
					STOCKDISPATCHDETAIL SED WITH(NOLOCK) 
					INNER JOIN STOCKDISPATCH SD WITH(NOLOCK) ON SD.STOCKDISPATCHID = SED.STOCKDISPATCHID
					INNER JOIN ITEMPRICE IP WITH(NOLOCK) ON IP.ITEMPRICEID = SED.ITEMPRICEID
					INNER JOIN BRANCH BINNER WITH(NOLOCK) ON BINNER.BRANCHID = SD.TOBRANCHID
				WHERE
					IP.ITEMCODEID = @ItemCodeID
					AND (SD.TOBRANCHID = @BranchID OR @BranchID = 0)
					AND (@FromDate IS NULL OR SD.CREATEDDATE > @FromDate)
					AND (@ToDate IS NULL OR SD.CREATEDDATE < @ToDate)
					AND SED.DELETEDDATE IS NULL AND SD.DELETEDDATE IS NULL
				GROUP BY BINNER.BRANCHID
			) SD ON SD.BRANCHID = B.BRANCHID
		LEFT JOIN 
			(
				SELECT BINNER.BRANCHID, SUM(PBD.QUANTITY) AS SALEQUANTITY
				FROM
					POS_BILLDETAIL PBD WITH(NOLOCK)
					INNER JOIN POS_BILL PB WITH(NOLOCK) ON PB.BILLID = PBD.BILLID AND PB.BRANCHCOUNTERID = PBD.BRANCHCOUNTERID
					INNER JOIN BRANCHCOUNTER BC WITH(NOLOCK) ON BC.COUNTERID = PBD.BRANCHCOUNTERID
					INNER JOIN BRANCH BINNER WITH(NOLOCK) ON BINNER.BRANCHID = BC.BRANCHID
					INNER JOIN ITEMPRICE IP WITH(NOLOCK) ON IP.ITEMPRICEID = PBD.ITEMPRICEID
				WHERE
					IP.ITEMCODEID = @ItemCodeID
					AND (BINNER.BRANCHID = @BranchID OR @BranchID = 0)
					AND (@FromDate IS NULL OR PB.CREATEDDATE > @FromDate)
					AND (@ToDate IS NULL OR PB.CREATEDDATE < @ToDate)
					AND PBD.DELETEDDATE IS NULL AND PB.DELETEDDATE IS NULL
					AND PB.DAYCLOSUREID IS NOT NULL
				GROUP BY BINNER.BRANCHID
			) ITEMSALE ON ITEMSALE.BRANCHID = B.BRANCHID
		LEFT JOIN 
			(
				SELECT PBR.BRANCHID, SUM(PBRD.QUANTITY) AS BREFUNDQUANTITY
				FROM
					POS_BREFUNDDETAIL PBRD WITH(NOLOCK) 
					INNER JOIN POS_BREFUND PBR WITH(NOLOCK) ON PBR.BREFUNDID = PBRD.BREFUNDID AND PBR.COUNTERID = PBRD.COUNTERID
					INNER JOIN ITEMPRICE IP WITH(NOLOCK) ON IP.ITEMPRICEID = PBRD.ITEMPRICEID
				WHERE
					IP.ITEMCODEID = @ItemCodeID
					AND (PBR.BRANCHID = @BranchID OR @BranchID = 0)
					AND PBR.IsAccepted = 1
					AND (@FromDate IS NULL OR PBR.CREATEDATE > @FromDate)
					AND (@ToDate IS NULL OR PBR.CREATEDATE < @ToDate)
					AND PBRD.DELETEDDATE IS NULL AND PBR.DELETEDDATE IS NULL	
				GROUP BY PBR.BRANCHID
			) BREFUND ON BREFUND.BRANCHID = B.BRANCHID
		LEFT JOIN
			(
				SELECT BC.BRANCHID, SUM(PCR.REFUNDQUANTITY) AS CREFUNDQUANTITY
				FROM
					POS_CREFUND PCR WITH(NOLOCK) 
					INNER JOIN POS_BILLDETAIL PBD WITH(NOLOCK) ON PBD.BILLDETAILID = PCR.BILLDETAILID AND PBD.BRANCHCOUNTERID = PCR.COUNTERID
					INNER JOIN POS_BILL PB WITH(NOLOCK) ON PB.BILLID = PBD.BILLID AND PB.BRANCHCOUNTERID = PBD.BRANCHCOUNTERID
					INNER JOIN BRANCHCOUNTER BC WITH(NOLOCK) ON BC.COUNTERID = PCR.COUNTERID
					INNER JOIN ITEMPRICE IP WITH(NOLOCK) ON IP.ITEMPRICEID = PBD.ITEMPRICEID
				WHERE
					IP.ITEMCODEID = @ItemCodeID
					AND (BC.BRANCHID = @BranchID OR @BranchID = 0)
					AND (@FromDate IS NULL OR PCR.CREATEDDATE > @FromDate)
					AND (@ToDate IS NULL OR PCR.CREATEDDATE < @ToDate)
					AND PCR.DELETEDDATE IS NULL AND PBD.DELETEDDATE IS NULL AND PB.DELETEDDATE IS NULL
				GROUP BY BC.BRANCHID
			) CREFUND ON CREFUND.BRANCHID = B.BRANCHID

	WHERE
		IC.ITEMCODEID = @ItemCodeID AND (B.BRANCHID = @BranchID OR @BranchID = 0)
	ORDER BY B.BRANCHCODE


	SELECT SED.STOCKENTRYDETAILID, SED.STOCKENTRYID, DLR.DEALERNAME, SE.SUPPLIERINVOICENO, SE.CREATEDDATE, IP.MRP, IP.SALEPRICE, SED.QUANTITY, SED.WEIGHTINKGS
	FROM
		STOCKENTRYDETAIL SED WITH(NOLOCK) 
		INNER JOIN STOCKENTRY SE WITH(NOLOCK) ON SE.STOCKENTRYID = SED.STOCKENTRYID
		INNER JOIN ITEMCOSTPRICE ICP WITH(NOLOCK) ON ICP.ITEMCOSTPRICEID = SED.ITEMCOSTPRICEID
		INNER JOIN ITEMPRICE IP WITH(NOLOCK) ON IP.ITEMPRICEID = ICP.ITEMPRICEID
		INNER JOIN TBLDEALER DLR WITH(NOLOCK) ON DLR.DEALERID = SE.SUPPLIERID
	WHERE
		IP.ITEMCODEID = @ItemCodeID
		AND (@FromDate IS NULL OR SE.CREATEDDATE > @FromDate)
		AND (@ToDate IS NULL OR SE.CREATEDDATE < @ToDate)
		AND SED.DELETEDDATE IS NULL AND SE.DELETEDDATE IS NULL

		
	SELECT 
		B.BRANCHID, SED.STOCKDISPATCHDETAILID, SED.STOCKDISPATCHID, SD.DISPATCHNUMBER, SD.CREATEDDATE, IP.MRP, IP.SALEPRICE, SED.DISPATCHQUANTITY, SED.WEIGHTINKGS
	FROM
		STOCKDISPATCHDETAIL SED WITH(NOLOCK) 
		INNER JOIN STOCKDISPATCH SD WITH(NOLOCK) ON SD.STOCKDISPATCHID = SED.STOCKDISPATCHID
		INNER JOIN ITEMPRICE IP WITH(NOLOCK) ON IP.ITEMPRICEID = SED.ITEMPRICEID
		INNER JOIN BRANCH B WITH(NOLOCK) ON B.BRANCHID = SD.TOBRANCHID
	WHERE
		IP.ITEMCODEID = @ItemCodeID
		AND (SD.TOBRANCHID = @BranchID OR @BranchID = 0)
		AND (@FromDate IS NULL OR SD.CREATEDDATE > @FromDate)
		AND (@ToDate IS NULL OR SD.CREATEDDATE < @ToDate)
		AND SED.DELETEDDATE IS NULL AND SD.DELETEDDATE IS NULL
		

	SELECT PBR.BRANCHID, PBRD.BREFUNDDETAILID, PBRD.BREFUNDID, PBR.BREFUNDNUMBER, PBR.CREATEDATE, IP.MRP
		, IP.SALEPRICE, PBRD.QUANTITY, PBRD.WEIGHTINKGS, PBRD.ACCEPTEDQUANTITY, PBRD.ACCEPTEDWEIGHTKGS
	FROM
		POS_BREFUNDDETAIL PBRD WITH(NOLOCK) 
		INNER JOIN POS_BREFUND PBR WITH(NOLOCK) ON PBR.BREFUNDID = PBRD.BREFUNDID AND PBR.COUNTERID = PBRD.COUNTERID
		INNER JOIN ITEMPRICE IP WITH(NOLOCK) ON IP.ITEMPRICEID = PBRD.ITEMPRICEID
	WHERE
		IP.ITEMCODEID = @ItemCodeID
		AND (PBR.BRANCHID = @BranchID OR @BranchID = 0)
		AND PBR.IsAccepted = 1
		AND (@FromDate IS NULL OR PBR.CREATEDATE > @FromDate)
		AND (@ToDate IS NULL OR PBR.CREATEDATE < @ToDate)
		AND PBRD.DELETEDDATE IS NULL AND PBR.DELETEDDATE IS NULL
		
	SELECT 
		B.BRANCHID, CAST(PB.CREATEDDATE AS DATE) AS BILLDATE, CASE WHEN @IncludeBillNumber = 1 THEN PB.BILLNUMBER ELSE NULL END BILLNUMBER
		, IP.MRP, IP.SALEPRICE, SUM(PBD.QUANTITY) AS QUANTITY, SUM(PBD.WEIGHTINKGS) AS WEIGHTINKGS		
	FROM
		POS_BILLDETAIL PBD WITH(NOLOCK)
		INNER JOIN POS_BILL PB WITH(NOLOCK) ON PB.BILLID = PBD.BILLID AND PB.BRANCHCOUNTERID = PBD.BRANCHCOUNTERID
		INNER JOIN BRANCHCOUNTER BC WITH(NOLOCK) ON BC.COUNTERID = PBD.BRANCHCOUNTERID
		INNER JOIN BRANCH B WITH(NOLOCK) ON B.BRANCHID = BC.BRANCHID
		INNER JOIN ITEMPRICE IP WITH(NOLOCK) ON IP.ITEMPRICEID = PBD.ITEMPRICEID
	WHERE
		IP.ITEMCODEID = @ItemCodeID
		AND (B.BRANCHID = @BranchID OR @BranchID = 0)
		AND (@FromDate IS NULL OR PB.CREATEDDATE > @FromDate)
		AND (@ToDate IS NULL OR PB.CREATEDDATE < @ToDate)
		AND PBD.DELETEDDATE IS NULL AND PB.DELETEDDATE IS NULL
		AND PB.DAYCLOSUREID IS NOT NULL
		GROUP BY B.BRANCHID, CAST(PB.CREATEDDATE AS DATE), IP.MRP, IP.SALEPRICE, CASE WHEN @IncludeBillNumber = 1 THEN PB.BILLNUMBER ELSE NULL END

	SELECT B.BRANCHID, PCR.REFUNDID, PBD.BILLDETAILID, PBD.BILLID, PCR.CREATEDDATE AS REFUNDDATE
		, PB.BILLNUMBER, IP.MRP, IP.SALEPRICE, PCR.REFUNDQUANTITY, PCR.REFUNDWEIGHTINKGS
	FROM
		POS_CREFUND PCR WITH(NOLOCK) 
		INNER JOIN POS_BILLDETAIL PBD WITH(NOLOCK) ON PBD.BILLDETAILID = PCR.BILLDETAILID AND PBD.BRANCHCOUNTERID = PCR.COUNTERID
		INNER JOIN POS_BILL PB WITH(NOLOCK) ON PB.BILLID = PBD.BILLID AND PB.BRANCHCOUNTERID = PBD.BRANCHCOUNTERID
		INNER JOIN BRANCHCOUNTER BC WITH(NOLOCK) ON BC.COUNTERID = PCR.COUNTERID
		INNER JOIN BRANCH B WITH(NOLOCK) ON B.BRANCHID = BC.BRANCHID
		INNER JOIN ITEMPRICE IP WITH(NOLOCK) ON IP.ITEMPRICEID = PBD.ITEMPRICEID
	WHERE
		IP.ITEMCODEID = @ItemCodeID
		AND (B.BRANCHID = @BranchID OR @BranchID = 0)
		AND (@FromDate IS NULL OR PCR.CREATEDDATE > @FromDate)
		AND (@ToDate IS NULL OR PCR.CREATEDDATE < @ToDate)
		AND PCR.DELETEDDATE IS NULL AND PBD.DELETEDDATE IS NULL AND PB.DELETEDDATE IS NULL
END
GO